# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
 branches:
   include:
   - master
 paths:
   exclude:
   - azure-pipelines-worker.yml
   - .github/workflows/main.yml
   - src/PresenceLight.Worker/*
   - README.md
      


stages:
- stage: Build
  variables:
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    BuildConfiguration: Release

  jobs:
  - job: Build
    pool:
      vmImage: windows-latest
    strategy:
      matrix:
        Channel_Release:
          ChannelName: Release
        Channel_Nightly:
          ChannelName: Nightly

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK 5.0.x'
      inputs:
        version: 5.0.x
        includePreviewVersions: true

    - task: DotNetCoreCLI@2
      inputs:
        command: custom
        custom: tool
        arguments: install -g nbgv
      displayName: Install NBGV tool

    - script: nbgv cloud -c -a
      displayName: Set Build Version

    - powershell: |
        mkdir $(Build.ArtifactStagingDirectory)\$(ChannelName)
        # Update appxmanifest. This must be done before build.
        # Set the per-channel values into the appxmanifest, replacing the checked-in values
        [xml]$manifest= get-content ".\src\PresenceLight.Package\Package.appxmanifest"
        $manifest.Package.Identity.Version = "$(GitBuildVersionSimple).0"
        $manifest.save(".\src\PresenceLight.Package\Package.appxmanifest")

        [xml]$manifest = Get-Content ".\src\PresenceLight.Package\Package-Nightly.appxmanifest"
        $manifest.Package.Identity.Version = "$(GitBuildVersionSimple).0"
        $manifest.Save(".\src\PresenceLight.Package\Package-Nightly.appxmanifest")

      displayName: Update AppxManifest version

    - powershell: |
        ((Get-Content -path .\.chocolatey\tools\ChocolateyInstall.ps1 -Raw) -replace 'Release','PresenceLight.$(Build.BuildNumber)') | Set-Content -Path .\.chocolatey\tools\ChocolateyInstall.ps1
      displayName: Update ChocolateyInstall.ps1

    - powershell: |
        # Update App Insights instrumentation key
        [xml]$doc = Get-Content ".\src\PresenceLight\ApplicationInsights.config"
        $doc.ApplicationInsights.InstrumentationKey = "$(AppInsightsKey)"
        $doc.save(".\src\PresenceLight\ApplicationInsights.config")
      displayName: Set AppInsights Config in ApplicationInsightsConfig
      env:
        AppInsightsKey: $(AppInsightsKey)
      condition: and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')), not(eq(variables['AppInsightsKey'], '')))

    - powershell: |
        # Update AppSettings.json. This must be done before build.
        $appsettings= get-content ".\src\PresenceLight\appsettings.json" -raw | ConvertFrom-Json
        $appsettings.clientId = "$env:ApplicationId"
        $appsettings | ConvertTo-Json -depth 32| set-content '.\src\PresenceLight\appsettings.json'
      displayName: Update appsettings.json
      env:
        ApplicationId: $(ApplicationId)

    - powershell: |
        # Update badges
        [xml]$badge = Get-Content ".\Build\ci_badge.svg"
        $badge.svg.g[1].text[2].InnerText = "$(GitBuildVersionSimple).0"
        $badge.svg.g[1].text[3].InnerText = "$(GitBuildVersionSimple).0"
        $badge.Save("$(Build.ArtifactStagingDirectory)\$(ChannelName)\ci_badge.svg")
        [xml]$badge = Get-Content ".\Build\store_badge.svg"
        $badge.svg.g[1].text[2].InnerText = "$(GitBuildVersionSimple).0"
        $badge.svg.g[1].text[3].InnerText = "$(GitBuildVersionSimple).0"
        $badge.Save("$(Build.ArtifactStagingDirectory)\$(ChannelName)\stable_badge.svg")
      displayName: Update Badge Versions

    - task: MSBuild@1
      displayName: Build Presence Light for $(ChannelName)
      inputs:
        solution: '.\src\PresenceLight\PresenceLight.csproj'
        msbuildArguments: /restore /t:publish /p:IncludeSymbols=true /p:PublishProfile=Properties/PublishProfiles/WinX86.pubxml
        configuration: $(BuildConfiguration)
        maximumCpuCount: true

    - task: MSBuild@1
      displayName: Build Appx Package
      inputs:
        solution: '.\src\PresenceLight.Package\PresenceLight.Package.wapproj'
        msbuildArguments: /p:IncludeSymbols=true /p:AppxPackageDir="$(Build.ArtifactStagingDirectory)\$(ChannelName)\\"
        configuration: $(BuildConfiguration)
        maximumCpuCount: true

    - powershell: |
        # Chocolatey
        & choco.exe pack .\.chocolatey\PresenceLight.nuspec --version $(NBGV_ChocolateyPackageVersion) --OutputDirectory $(Build.ArtifactStagingDirectory)\$(ChannelName)
      displayName: Create Choco Package
      condition: and(succeeded(), eq(variables['ChannelName'], 'Release'))

    - task: ArchiveFiles@1
      displayName: Zip PresenceLight Files
      inputs:
        archiveType: default
        rootFolder: '.\src\PresenceLight\bin\$(BuildConfiguration)\netcoreapp5.0\win-x86\publish'
        archiveFile: $(Build.ArtifactStagingDirectory)\$(ChannelName)\PresenceLight.$(Build.BuildNumber).zip
        includeRootFolder: false
      condition: and(succeeded(), eq(variables['ChannelName'], 'Release'))

    - publish: $(Build.ArtifactStagingDirectory)\$(ChannelName)
      displayName: Publish Arifacts
      artifact: $(ChannelName)

    - publish: Build
      displayName: Publish signing scripts
      artifact: SigningScripts
      condition: and(succeeded(), eq(variables['ChannelName'], 'Release'))

- stage: CodeSign
  condition: and(succeeded('Build'), not(eq(variables['build.reason'], 'PullRequest')))
  jobs:
  - deployment: CodeSign
    displayName: Code Signing
    pool:
      vmImage: windows-latest
    environment: Code Sign - CI
    variables:
    - group: Sign Client Credentials
    strategy:
      runOnce:
        deploy:
          steps:

          - task: DownloadPipelineArtifact@2
            displayName: Download Release Artifacts
            inputs:
              artifactName: Release
              targetPath: $(Pipeline.Workspace)/ToSign/Release

          - task: DownloadPipelineArtifact@2
            displayName: Download Nightly Artifacts
            inputs:
              artifactName: Nightly
              targetPath: $(Pipeline.Workspace)/ToSign/Nightly

          - download: current
            artifact: SigningScripts

          - task: DotNetCoreCLI@2
            inputs:
              command: custom
              custom: tool
              arguments: install --tool-path . SignClient
            displayName: Install SignTool tool

          - task: AzureCLI@2
            displayName: Scale Up Sign Service
            inputs:
              azureSubscription: 'Isaac Levin MSDN (a07802f5-f8df-47d8-9b88-79ba55cfb396)'
              scriptType: 'ps'
              scriptLocation: 'inlineScript'
              inlineScript: 'az appservice plan update --name levin-signserv-asp-2dnwx6q6jwiay --resource-group SignService --sku P1V2'

          - pwsh: |
              .\SignClient "Sign" `
              --baseDirectory "$(Pipeline.Workspace)\ToSign" `
              --input "**/*.{appxbundle,appinstaller,zip,nupkg}" `
              --config "$(Pipeline.Workspace)\SigningScripts\appsettings.json" `
              --filelist "$(Pipeline.Workspace)\SigningScripts\filelist.txt" `
              --user "$(SignClientUser)" `
              --secret "$(SignClientSecret)" `
              --name "PresenceLight" `
              --description "PresenceLight" `
              --descriptionUrl "https://github.com/isaacrlevin/PresenceLight"
            displayName: Authenticode Sign artifacts

          - task: AzureCLI@2
            displayName: Scale Down Sign Service
            inputs:
              azureSubscription: 'Isaac Levin MSDN (a07802f5-f8df-47d8-9b88-79ba55cfb396)'
              scriptType: 'ps'
              scriptLocation: 'inlineScript'
              inlineScript: 'az appservice plan update --name levin-signserv-asp-2dnwx6q6jwiay --resource-group SignService --sku S1'

          - publish: $(Pipeline.Workspace)/ToSign/Release
            displayName: Publish Signed Release Packages
            artifact: ReleaseSigned

          - publish: $(Pipeline.Workspace)/ToSign/Nightly
            displayName: Publish Signed Nightly Packages
            artifact: NightlySigned
