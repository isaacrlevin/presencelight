@using PresenceLight.Core;

<div class="row">
    <div class="col-12">
        <input type="checkbox" checked="@Light.UseActivityStatus" @bind-value="@Light.UseActivityStatus" /> Use Activity Statuses
    </div>
</div>
<br />
<br />

@foreach (var lightStatus in Light.Statuses.GetType().GetProperties().OrderBy(a => a.Name))
{
    @if ((!Light.UseActivityStatus && lightStatus.Name.Contains("Availability")) || (Light.UseActivityStatus && lightStatus.Name.Contains("Activity")))
    {
        var status = (AvailabilityStatus)lightStatus.GetValue(Light.Statuses);

        <div class="row" style="margin-bottom: 10px">
            <div class="col-4">
                <h5>@Helpers.HumanifyText(lightStatus.Name.Replace("Status","").Replace("Availability","").Replace("Activity","")) Color</h5>
            </div>
            <div class="col-4">
                <ColorEdit Color="@status.Colour" @onchange="@((ChangeEventArgs e) => ChangeStatusColor(e, status))" />
            </div>
            <div class="col-4">
                <input type="checkbox" checked="@status.Disabled" @onchange="@((ChangeEventArgs e) => StatusDisabledOnCheck(e, status))" /> Off?
            </div>
        </div>
    }
}

@code {
    [Parameter] public BaseLight Light { get; set; }

    void StatusDisabledOnCheck(ChangeEventArgs e, object settingValue)
    {
        var newSetting = e.Value;
        AvailabilityStatus status = (AvailabilityStatus)settingValue;
        status.Disabled = (bool)newSetting;
    }

    void ChangeStatusColor(ChangeEventArgs e, object settingValue)
    {
        var newSetting = e.Value;
        AvailabilityStatus status = (AvailabilityStatus)settingValue;
        status.Colour = (string)newSetting;
    }
}
