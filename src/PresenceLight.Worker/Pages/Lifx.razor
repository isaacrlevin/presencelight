@page "/lifx"

@inject LIFXService _lifxService
@inject AppState appState
@inject IModalService Modal
@inject IOptionsMonitor<BaseConfig> LightsConfig
@inject ILogger<Lifx> _logger;

<div class="container text-body" style="overflow:hidden">
    <div class="row">
        <div class="container-fluid">
            <div class="row-fluid">
                <div class="centering text-center">
                    <h1 class="centering text-center">Configure LIFX</h1>
                    <br />
                    <br />
                    <input type="checkbox" checked="@LightsConfig.CurrentValue.LightSettings.LIFX.IsLIFXEnabled" @bind-value="@LightsConfig.CurrentValue.LightSettings.LIFX.IsLIFXEnabled" /> Connect to LIFX
                    <br />
                    <br />
                    @if (LightsConfig.CurrentValue.LightSettings.LIFX.IsLIFXEnabled)
                    {

                        <div class="row">
                            <div class="col-4 text-right">
                                <h5>LIFX Token</h5>
                            </div>
                            <div class="col-8">
                                <input style="width: 75%" @bind-value="@LightsConfig.CurrentValue.LightSettings.LIFX.LIFXApiKey" type="text" /> <a href="https://cloud.lifx.com/settings" target="_blank">Get Token</a>
                            </div>
                        </div>
                        <br /><br />
                        @if (!string.IsNullOrEmpty(LightsConfig.CurrentValue.LightSettings.LIFX.LIFXApiKey))
                        {
                            <button @onclick="@((ev) => CheckLIFX("Lights"))" class="btn btn-primary" type="submit">Get Lights</button>
                            <span>&nbsp;&nbsp;</span>
                            <button @onclick="@((ev) => CheckLIFX("Groups"))" class="btn btn-primary" type="submit">Get Groups</button>
                        }
                        <br /><br />
                        if (isLoadingLights)
                        {
                            <Circle Center="true" />
                        }
                        else
                        {
                            @if (appState.LIFXLights != null)
                            {
                                <br /><br />

                                @if (showLifxMessage)
                                {
                                    <span class="@lifxMessageClass">@lifxMessage</span>
                                }

                                <br /><br />
                                <span><strong>@lastType</strong></span>
                                <div class="form-group col-3 centering text-center">
                                    <select class="form-control" @onchange="OnChange">
                                        <option disabled="disabled">Select</option>
                                        @foreach (var light in appState.LIFXLights)
                                        {
                                            if (light.GetType() == typeof(LifxCloud.NET.Models.Group))
                                            {
                                                var obj = (LifxCloud.NET.Models.Group)light;

                                                @if (LightsConfig.CurrentValue.LightSettings.LIFX.SelectedLIFXItemId == $"group_id:{obj.Id}")
                                                {
                                                    <option selected="selected" value=group_id:@obj.Id>@obj.Label</option>
                                                }
                                                else
                                                {
                                                    <option value=group_id:@obj.Id>@obj.Label</option>
                                                }
                                            }
                                            else
                                            {
                                                var obj = (LifxCloud.NET.Models.Light)light;

                                                @if (LightsConfig.CurrentValue.LightSettings.LIFX.SelectedLIFXItemId == $"id:{obj.Id}")
                                                {
                                                    <option selected="selected" value=id:@obj.Id>@obj.Label</option>
                                                }
                                                else
                                                {
                                                    <option value=id:@obj.Id>@obj.Label</option>
                                                }
                                            }

                                        }
                                    </select>
                                </div>
                            }
                            <br />
                            <br />
                            @if (!string.IsNullOrEmpty(LightsConfig.CurrentValue.LightSettings.LIFX.LIFXApiKey))
                            {
                                <button class="btn btn-primary" @onclick="Save">Save LIFX Settings</button>
                            }
                            <br />
                            <br />
                            @if (settingsSaved)
                            {
                                <span class="text-success">@message</span>
                            }
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    bool settingsSaved = false;
    string message;
    string lifxMessageClass;

    bool showLifxMessage = false;
    string lifxMessage;
    string lastType = "";
    bool isLoadingLights = false;
    private void Save()
    {
        try
        {
            System.IO.File.WriteAllText($"{System.IO.Directory.GetCurrentDirectory()}/PresenceLightSettings.json", JsonConvert.SerializeObject(LightsConfig.CurrentValue, Formatting.Indented));
            message = "Settings Saved";
            settingsSaved = true;
        }
        catch (Exception e)
        {
            Helpers.AppendLogger(_logger, "Error Occured Saving Lifx Settings", e);
            throw e;
        }
    }

    async Task CheckLIFX(string type)
    {
        isLoadingLights = true;
        if (string.IsNullOrEmpty(lastType) || type != lastType)
        {
            LightsConfig.CurrentValue.LightSettings.LIFX.SelectedLIFXItemId = string.Empty;
            lastType = type;
        }

        if (!string.IsNullOrEmpty(LightsConfig.CurrentValue.LightSettings.LIFX.LIFXApiKey))
        {
            try
            {
                Save();
                if (type == "Groups")
                {
                    appState.SetLIFXLights(await _lifxService.GetAllGroups(LightsConfig.CurrentValue.LightSettings.LIFX.LIFXApiKey));

                    if (string.IsNullOrEmpty(LightsConfig.CurrentValue.LightSettings.LIFX.SelectedLIFXItemId) && appState.LIFXLights.Count() > 0)
                    {
                        var obj = (LifxCloud.NET.Models.Group)appState.LIFXLights.FirstOrDefault();
                        LightsConfig.CurrentValue.LightSettings.LIFX.SelectedLIFXItemId = $"group_id:{obj.Id}";
                    }
                }
                else
                {
                    appState.SetLIFXLights(await _lifxService.GetAllLights(LightsConfig.CurrentValue.LightSettings.LIFX.LIFXApiKey));

                    if (string.IsNullOrEmpty(LightsConfig.CurrentValue.LightSettings.LIFX.SelectedLIFXItemId) && appState.LIFXLights.Count() > 0)
                    {
                        var obj = (LifxCloud.NET.Models.Light)appState.LIFXLights.FirstOrDefault();
                        LightsConfig.CurrentValue.LightSettings.LIFX.SelectedLIFXItemId = $"id:{obj.Id}";
                    }
                }

                Save();

                showLifxMessage = true;
                lifxMessage = "Connected to LIFX Cloud";
                lifxMessageClass = "text-success";
            }
            catch (Exception e)
            {
                Helpers.AppendLogger(_logger, "Error Occured Getting LIFX Lights", e);
                showLifxMessage = true;
                lifxMessage = "Error Occured Connecting to LIFX, please try again";
                lifxMessageClass = "text-danger";
                this.StateHasChanged();
                appState.SetLIFXLights(new List<LifxCloud.NET.Models.Light>());
            }

        }

        isLoadingLights = false;
    }


    private void OnChange(ChangeEventArgs e)
    {
        var light = e.Value.ToString();
        LightsConfig.CurrentValue.LightSettings.LIFX.SelectedLIFXItemId = light;
        appState.SetLIFXLight(light);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            appState.OnChange += RaiseStateHasChanged;

            if (LightsConfig.CurrentValue.LightSettings.LIFX.IsLIFXEnabled
            && !string.IsNullOrEmpty(LightsConfig.CurrentValue.LightSettings.LIFX.LIFXApiKey)
            && !string.IsNullOrEmpty(LightsConfig.CurrentValue.LightSettings.LIFX.SelectedLIFXItemId))
            {
                isLoadingLights = true;
                if (LightsConfig.CurrentValue.LightSettings.LIFX.SelectedLIFXItemId.Contains("group"))
                {
                    appState.SetLIFXLights(await _lifxService.GetAllGroups(LightsConfig.CurrentValue.LightSettings.LIFX.LIFXApiKey));
                    lastType = "Groups";
                }
                else
                {
                    appState.SetLIFXLights(await _lifxService.GetAllLights(LightsConfig.CurrentValue.LightSettings.LIFX.LIFXApiKey));
                    lastType = "Lights";
                }
                showLifxMessage = true;
                lifxMessage = "Connected to LIFX Cloud";
                lifxMessageClass = "text-success";
                isLoadingLights = false;
            }
        }
        catch (Exception e)
        {
            Helpers.AppendLogger(_logger, "Error Occured loading LIFX Setup", e);
            throw e;
        }
    }

    public void Dispose()
    {
        appState.OnChange -= RaiseStateHasChanged;
    }

    private void RaiseStateHasChanged()
    {
        InvokeAsync(StateHasChanged);
    }
}
