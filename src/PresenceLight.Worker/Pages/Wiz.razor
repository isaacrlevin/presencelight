@page "/wiz"

@inject PresenceLight.Worker.Services.SettingsService SettingsService

@inject AppState appState
@inject IOptionsMonitor<BaseConfig> Config
@inject ILogger<CustomApiSetup> _logger;

<div class="container text-body" style="overflow:hidden">
    <div class="row">
        <div class="container-fluid">
            <div class="row-fluid">
                <div>
                    <h1>Configure Wiz</h1>
                    <br />
                    <br />
                    <div>
                        <input type="checkbox" checked="@Config.CurrentValue.LightSettings.Wiz.IsEnabled" @bind-value="@Config.CurrentValue.LightSettings.Wiz.IsEnabled" /> Connect to Wiz
                    </div>
                    <br />
                    <br />
                    @if (Config.CurrentValue.LightSettings.Wiz.IsEnabled)
                    {
                        <div class="row">
                            <div class="col-12">
                                <button @onclick="GetLights" class="btn btn-primary" type="submit">Find Wiz Lights</button>
                            </div>
                        </div>

                        <br />
                        <br />
                        @if (appState.WizLights != null)
                        {
                            <div class="form-group col-3 centering text-center">
                                <select class="form-control" @onchange="OnChange">
                                    <option disabled="disabled">Select</option>
                                    @foreach (var light in appState.WizLights)
                                    {
                                        @if (Config.CurrentValue.LightSettings.Wiz.SelectedItemId == light.MacAddress)
                                        {
                                            <option selected="selected" value=@light.MacAddress>@light.LightName</option>
                                        }
                                        else
                                        {
                                            <option value=@light.MacAddress>@light.LightName</option>
                                        }
                                    }
                                </select>
                            </div>
                        }
                          <br />
                        <br />
                        <div class="row">
                            <div class="col-4">
                                <h5>Brightness</h5>
                            </div>
                            <div class="col-4">
                                <Slider TValue="int" @bind-Value="@Config.CurrentValue.LightSettings.Wiz.Brightness" Step="1" Min="0" Max="100" />
                            </div>
                            <div class="col-4">
                                <input style="width:50px" @bind-value="@Config.CurrentValue.LightSettings.Wiz.Brightness" type="text" />
                            </div>
                        </div>

                        <br />
                        <br />

                        <Statuses Light="@Config.CurrentValue.LightSettings.Wiz"></Statuses>

                        <br />
                        <br />

                        <button class="btn btn-primary" @onclick="Save">Save Wiz Settings</button>

                        <br />
                        <br />
                        <div>
                            @if (settingsSaved)
                            {
                                <span class="@wizMessageClass">@message</span>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private void Save()
    {
        try
        {
            SettingsService.SaveSettings(Config.CurrentValue);
            message = "Settings Saved";
            settingsSaved = true;
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Error Occured Saving Wiz Settings");
            throw;
        }
    }

    bool settingsSaved = false;
    string message;
    string wizMessageClass;
    bool isLoadingLights = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            appState.OnChange += RaiseStateHasChanged;

            if (Config.CurrentValue.LightSettings.Wiz.IsEnabled
            && !string.IsNullOrEmpty(Config.CurrentValue.LightSettings.Wiz.SelectedItemId))
            {
                isLoadingLights = true;
                appState.SetWizLights(await _mediator.Send(new Core.WizServices.GetLightsCommand()));

                settingsSaved = true;
                message = "Connected to Wiz Cloud";
                wizMessageClass = "text-success";
                isLoadingLights = false;
            }
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Error Occured loading Wiz");
            throw;
        }
        await Task.CompletedTask;
    }

    private void OnChange(ChangeEventArgs e)
    {
        var light = e.Value.ToString();
        Config.CurrentValue.LightSettings.Wiz.SelectedItemId = light;
        appState.SetWizLight(light);
    }

    public async Task GetLights()
    {
        try
        {
            appState.SetWizLights(await _mediator.Send(new Core.WizServices.GetLightsCommand()));

            if (string.IsNullOrEmpty(Config.CurrentValue.LightSettings.Wiz.SelectedItemId) && appState.WizLights.Count() > 0)
            {
                Config.CurrentValue.LightSettings.Wiz.SelectedItemId = appState.WizLights.FirstOrDefault().MacAddress;
            }

        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error occured Finding Wiz");
            throw;
        }
    }

    public void Dispose()
    {
        appState.OnChange -= RaiseStateHasChanged;
    }

    private void RaiseStateHasChanged()
    {
        InvokeAsync(StateHasChanged);
    }
}
