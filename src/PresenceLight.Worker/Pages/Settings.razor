@page "/settings"


@inject IOptionsMonitor<BaseConfig> Config
@inject ILogger<Settings> _logger;

<div class="container text-body" style="overflow:hidden">
    <h1 class="centering text-center">Settings</h1>
    <br />
    <br />
    <div class="row">
        <div class="col-4">
            <h5>Teams Presence Polling Interval</h5>
        </div>
        <div class="col-4">
            <Slider TValue="double" @bind-Value="@Config.CurrentValue.LightSettings.PollingInterval" Step=".1" Min="1.0" Max="5.0" />
        </div>
        <div class="col-1">
            <input style="width:50px" @bind-value="@Config.CurrentValue.LightSettings.PollingInterval" type="text" />
        </div>
    </div>
    <br /><br />
    <div class="row">
        <div class="col-4">
            <h5>Brightness</h5>
        </div>
        <div class="col-4">
            <Slider TValue="int" @bind-Value="@Config.CurrentValue.LightSettings.DefaultBrightness" Step="1" Min="0" Max="100" />
        </div>
        <div class="col-1">
            <input style="width:50px" @bind-value="@Config.CurrentValue.LightSettings.DefaultBrightness" type="text" />
        </div>
    </div>
    <br />
    <br />
    <button @onclick="SaveSettings" class="btn btn-primary">Save Settings</button>
    <br /><br />
    @if (settingsSaved)
    {
        <span class="text-success">@message</span>
    }
</div>


@code {
    bool settingsSaved = false;
    string message;


    void SaveSettings()
    {
        try
        {
            System.IO.File.WriteAllText($"{System.IO.Directory.GetCurrentDirectory()}/PresenceLightSettings.json", JsonConvert.SerializeObject(Config.CurrentValue, Formatting.Indented));
            message = "Settings Saved";
            settingsSaved = true;
        }
        catch (Exception e)
        {
            Helpers.AppendLogger(_logger, "Error Occured Saving Settings", e);
            throw e;
        }
    }
}
