@page "/color"

@using LifxCloud.NET.Models
@inject AppState appState
@inject IOptionsMonitor<BaseConfig> Config
@inject IJSRuntime jsRuntime;
@inject ILogger<Color> _logger;

<div class="container text-body">
    <div class="row">
        <div class="container-fluid">
            <div class="row-fluid">
                <div>
                    <h1>Set Light Colors</h1>
                    <br />
                    <br />
                    <div style="width: 85%">
                        <div id="extraPicker" class="colorPicker"></div>
                    </div>
                    <br />
                    <button @onclick="SetColor" class="btn btn-primary">Set Color</button>
                    <button disabled="@isGraphDisabled" @onclick="SyncTeamsPresence" class="btn btn-primary">Sync Teams Presence</button>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    bool isGraphDisabled = false;
    string color;


    async Task SetColor()
    {
        try
        {
            color = await jsRuntime.InvokeAsync<string>("getColor");

            appState.SetLightMode("Custom");
            isGraphDisabled = false;

            if (appState.LightMode == "Custom")
            {
                appState.SetCustomColor(color);
            }

            if (appState.LightMode == "Custom")
            {
                if (!string.IsNullOrEmpty(Config.CurrentValue.LightSettings.Hue.HueApiKey) && !string.IsNullOrEmpty(Config.CurrentValue.LightSettings.Hue.HueIpAddress) && !string.IsNullOrEmpty(Config.CurrentValue.LightSettings.Hue.SelectedItemId))
                {


                    await _mediator.Send(new Core.HueServices.SetColorCommand() { Availability = appState.CustomColor,  LightID = Config.CurrentValue.LightSettings.Hue.SelectedItemId, Activity = "" }).ConfigureAwait(true);

                }

                if (Config.CurrentValue.LightSettings.LIFX.IsEnabled && !string.IsNullOrEmpty(Config.CurrentValue.LightSettings.LIFX.LIFXApiKey))
                {
                    
                    await _mediator.Send(new Core.LifxServices.SetColorCommand() { Availability = appState.CustomColor, Activity = "", LightId = Config.CurrentValue.LightSettings.LIFX.SelectedItemId });

                }
            }
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Error Occured Setting Custom Color");
            throw;
        }
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("loadColor");
        }
        base.OnAfterRender(firstRender);
    }

    void SyncTeamsPresence()
    {
        isGraphDisabled = true;
        appState.SetLightMode("Graph");
    }

    protected override void OnInitialized()
    {
        appState.OnChange += RaiseStateHasChanged;
    }

    public void Dispose()
    {
        appState.OnChange -= RaiseStateHasChanged;
    }

    private void RaiseStateHasChanged()
    {
        InvokeAsync(StateHasChanged);
    }
}
