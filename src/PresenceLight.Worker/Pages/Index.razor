@page "/"

@using PresenceLight.Core
@using Microsoft.Graph;
@using System;
@using System.Net;
@using System.Net.Http;
@using System.Net.Http.Headers;
@using System.Threading.Tasks;
@using Newtonsoft.Json;
@using Microsoft.Extensions.Options
@using System.Threading;
@inject AppState appState
@inject PresenceLight.Core.IHueService _hueService
@inject IOptionsMonitor<ConfigWrapper> Config
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor _httpContextAccessor
@inject UserAuthService _userAuthService
<h1>@appState.User?.DisplayName</h1>

<div class="container">
    <img class="image" src="@appState.ProfileImage" />
    <div class="circle bottom-right @appState.Presence?.Availability"></div>
</div>

@code {

    protected override async Task OnInitializedAsync()
    {
        appState.OnChange += RaiseStateHasChanged;

        // Handle server restarts
        // In this case, the user's browser still has the auth cookie
        // so the HttpContext is authenticated, and ASP.NET won't
        // challenge the user. We need the challenge piece to go through
        // so we can initialize MSAL properly in the OnAuthorizationCodeReceived
        // event. This is because we're not persisting the token cache, so on restart it's empty.
        // The alternative here would be to implement a proper storage for
        // token cache serialization. Since this is running on a local box, and is cross-plat,
        // doing this securely might be challenging.
        bool isUserAuth = await _userAuthService.IsUserAuthenticated();
        if (!isUserAuth)
        {
            await _httpContextAccessor.HttpContext.ChallengeAsync();
        }
    }

    public void Dispose()
    {
        appState.OnChange -= RaiseStateHasChanged;
    }

    private void RaiseStateHasChanged()
    {
        InvokeAsync(StateHasChanged);
    }
}