@page "/custom"

@using PresenceLight.Core.Initialize;
@inject ILogger<CustomApiSetup> _logger;

<MudPaper Width="100%" Elevation="0">
    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Style="text-align:center">
        <MudText Typo="Typo.h3">Configure Custom API</MudText>
        <MudGrid Class="mt-10" Justify="Justify.Center">
            <MudItem xs="12">
                <MudCheckBox @bind-Value="@appState.Config.LightSettings.CustomApi.IsEnabled" Label="Connect to Custom API"></MudCheckBox>
            </MudItem>
        </MudGrid>
        @if (appState.Config.LightSettings.CustomApi.IsEnabled)
        {
            @foreach (var customApiSetting in appState.Config.LightSettings.CustomApi.GetType().GetProperties())
            {
                @if (customApiSetting.PropertyType.Name == "CustomApiSetting")
                {
                    object customApiSettingValue = customApiSetting.GetValue(appState.Config.LightSettings.CustomApi, null);
                    var lab = $"{customApiSetting.Name}Uri";
                    var  body = $"{customApiSetting.Name}body";

                    <MudGrid Class="mt-10" Justify="Justify.Center">
                        <MudItem xs="12">
                            <strong><label for="@lab">@Helpers.HumanifyText(customApiSetting.Name.Replace("CustomApi","")):</label></strong>
                        </MudItem>
                        @if (customApiSettingValue != null)
                        {
                            @foreach (var setting in customApiSettingValue.GetType().GetProperties())
                            {
                                object settingValue = setting.GetValue(customApiSettingValue, null);

                                if (setting.Name == "Method")
                                {
                                    <MudItem xs="2">
                                        <label>Method</label>
                                        <select class="form-control" value="@settingValue?.ToString()" @onchange="@((ChangeEventArgs e) => OnChange(e, setting, customApiSettingValue))">
                                            <option value="">Select</option>
                                            <option value="GET">GET</option>
                                            <option value="POST">POST</option>
                                        </select>
                                    </MudItem>                                    
                                }
                                else if (setting.Name == "Uri")
                                {                           
                                    <MudItem xs="4">
                                        <Label>Uri</Label>
                                        <input type="text" id="@lab" value="@settingValue?.ToString()" @onchange="@((ChangeEventArgs e) => OnChange(e, setting, customApiSettingValue))" class="form-control" />
                                    </MudItem>
                                }
                                else if (setting.Name == "Body")
                                {
                                    <MudItem xs="6">
                                        <Label>Body</Label>
                                        <input type="text" id="@body" value="@settingValue?.ToString()" @onchange="@((ChangeEventArgs e) => OnChange(e, setting, customApiSettingValue))" class="form-control" />
                                    </MudItem>
                                }
                            }
                        }
                    </MudGrid>
                }
            }

            <MudGrid Class="mt-10" Justify="Justify.Center">
                <MudItem xs="12">
                    <input type="checkbox" checked="@appState.Config.LightSettings.CustomApi.UseBasicAuth" @bind-value="@appState.Config.LightSettings.CustomApi.UseBasicAuth" /> Use Basic Auth
                </MudItem>
            </MudGrid>


            @if (appState.Config.LightSettings.CustomApi.UseBasicAuth)
            {
                <MudGrid Class="mt-10" Justify="Justify.Center">
                    <MudItem xs="3">
                        Basic Auth Username:
                    </MudItem>
                    <MudItem xs="7">
                        <input style="width: 100%" @bind-value="@appState.Config.LightSettings.CustomApi.BasicAuthUserName" type="text" class="form-control">
                    </MudItem>
                </MudGrid>

                <MudGrid Class="mt-10" Justify="Justify.Center">
                    <MudItem xs="3">
                        Basic Auth Password:
                    </MudItem>
                    <MudItem xs="7">
                        <input style="width: 100%" @bind-value="@appState.Config.LightSettings.CustomApi.BasicAuthUserPassword" type="password" class="form-control">
                    </MudItem>
                </MudGrid>
            }
            <MudGrid Class="mt-10" Justify="Justify.Center">
                <MudItem xs="12">
                    <input type="checkbox" checked="@appState.Config.LightSettings.CustomApi.IgnoreCertificateErrors" @bind-value="@appState.Config.LightSettings.CustomApi.IgnoreCertificateErrors" /> Ignore Certificate Errors
                </MudItem>
            </MudGrid>
        }

        <MudItem Class="mt-10" xs="12">
            <MudButton Class="mb-10" OnClick="Save" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">Save</MudButton>
            @if (settingsSaved)
            {
                <MudText Color="MudBlazor.Color.Success">@message</MudText>
            }
        </MudItem>
    </MudContainer>
</MudPaper>



@code {

    bool settingsSaved = false;
    string message;

    protected override async Task OnInitializedAsync()
    {
        if (!appState.SignedIn)
        {
            NavManager.NavigateTo("/");
        }
        try
        {

            appState.OnChange += RaiseStateHasChanged;
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Error Occurred loading Custom API Page");
            throw;
        }
        await Task.CompletedTask;
    }

    private void Save()
    {
        try
        {
            SettingsService.SaveSettings(appState.Config);
            // Check if non of the objects from appState.Config.LightSettings.CustomApi has a property method set without also having the property uri set.
            foreach (var customApiSetting in appState.Config.LightSettings.CustomApi.GetType().GetProperties())
            {
                if (customApiSetting.PropertyType.Name == "CustomApiSetting")
                {
                    object customApiSettingValue = customApiSetting.GetValue(appState.Config.LightSettings.CustomApi, null);
                    foreach (var setting in customApiSettingValue.GetType().GetProperties())
                    {
                        if (setting.Name == "Method")
                        {
                            object settingValue = setting.GetValue(customApiSettingValue, null);
                            if (settingValue != null && settingValue.ToString() != "" && customApiSettingValue.GetType().GetProperty("Uri").GetValue(customApiSettingValue, null).ToString() == "")
                            {
                                _logger.LogError("Uri is required when Method is set");
                                throw new Exception("Uri is required when Method is set");
                            }
                        }
                        // Check if the Uri is set without the Method being set.
                        if (setting.Name == "Uri")
                        {
                            object settingValue = setting.GetValue(customApiSettingValue, null);
                            if (settingValue != null && settingValue.ToString() != "" && customApiSettingValue.GetType().GetProperty("Method").GetValue(customApiSettingValue, null).ToString() == "")
                            {
                                _logger.LogError("Method is required when Uri is set");
                                throw new Exception("Method is required when Uri is set");
                            }
                        }
                    }
                }
            }
            _mediator.Send(new InitializeCommand { AppState = appState });

            message = "Settings Saved";
            settingsSaved = true;
            _logger.LogInformation("Settings Saved from Custom API Page");
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Error Occurred Saving Custom API Settings");
            throw;
        }
    }

    private void OnChange(ChangeEventArgs e, object setting, object customApiSettingValue)
    {
        var newSetting = e.Value;
        ((PropertyInfo)setting).SetValue(customApiSettingValue, newSetting);
    }

    public void Dispose()
    {
        appState.OnChange -= RaiseStateHasChanged;
    }

    private void RaiseStateHasChanged()
    {
        InvokeAsync(StateHasChanged);
    }
}
