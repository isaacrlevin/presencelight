@page "/settings"

@inject ISettingsService SettingsService
@inject AppState appState;
@inject ILogger<Settings> _logger;

<div class="container text-body" style="overflow:hidden">
    <h1>Settings</h1>
    <br />
    <br />
    <div class="row">
        <div class="col-5">
            <input type="checkbox" checked="@appState.Config.LightSettings.SyncLights" @bind-value="@appState.Config.LightSettings.SyncLights" /> <strong>Light Sync Enabled</strong>
        </div><div class="col-5">
            <input type="checkbox" checked="@appState.Config.LightSettings.UseWorkingHours" @bind-value="@appState.Config.LightSettings.UseWorkingHours" /> <strong>Configure Working Hours</strong>
        </div>
    </div>
    <br />
    <br />
    <div style="height: 300px ">
        @if (appState.Config.LightSettings.UseWorkingHours)
        {
            <h5><strong>Working Days</strong></h5>
            <br />
            <div class="row">
                <div class="col-1_5 ">
                    <input @bind-value="Sunday" checked="@Sunday" type="checkbox" /> Sunday
                </div>
                <div class="col-1_5 ">
                    <input @bind-value="Monday" checked="@Monday" type="checkbox" /> Monday
                </div>
                <div class="col-1_5 ">
                    <input @bind-value="Tuesday" checked="@Tuesday" type="checkbox" /> Tuesday
                </div>
                <div class="col-1_5 ">
                    <input @bind-value="Wednesday" checked="@Wednesday" type="checkbox" /> Wednesday
                </div>
                <div class="col-1_5 ">
                    <input @bind-value="Thursday" checked="@Thursday" type="checkbox" /> Thursday
                </div>
                <div class="col-1_5 ">
                    <input @bind-value="Friday" checked="@Friday" type="checkbox" /> Friday
                </div>
                <div class="col-1_5 ">
                    <input @bind-value="Saturday" checked="@Saturday" type="checkbox" /> Saturday
                </div>
            </div>
            <br />
            <br />

            <div class="row">
                <div class="col-4">
                    <h5><strong>Light Syncing Schedule (Working Hours)</strong></h5>
                </div>

                <div class="col-3">
                    @{
                        TimeSpan? startTimeSpan = appState.Config.LightSettings.WorkingHoursStartTimeAsDate == null ? null : appState.Config.LightSettings.WorkingHoursStartTimeAsDate.Value.TimeOfDay;

                        <input style="width:75%" type="time" value="@startTimeSpan" @onchange="@((ChangeEventArgs e) => OnTimeChanged(e, "start"))" />
                    }
                </div>
                <div class="col-3">
                    @{
                        TimeSpan? endTimeSpan = appState.Config.LightSettings.WorkingHoursEndTimeAsDate == null ? null : appState.Config.LightSettings.WorkingHoursEndTimeAsDate.Value.TimeOfDay;

                        <input style="width:75%" type="time" value="@endTimeSpan" @onchange="@((ChangeEventArgs e) => OnTimeChanged(e, "end"))" />
                    }
                </div>
            </div>

            <br />
            <br />

            <div class="row">
                <div class="col-4">
                    <h5><strong>Light Status When After Hours Are Reached</strong></h5>
                </div>
                <div class="col-4">
                    <input type="radio" checked="@statusOff" @onchange="@((ChangeEventArgs e) => OnStatusChanged(e))" value="Off" name="reached" /> Off
                    <br />
                    <input type="radio" checked="@statusWhite" @onchange="@((ChangeEventArgs e) => OnStatusChanged(e))" value="White" name="reached" /> White
                    <br />
                    <input type="radio" checked="@statusKeep" @onchange="@((ChangeEventArgs e) => OnStatusChanged(e))" value="Keep" name="reached" /> Keep
                </div>
            </div>
            <br />
            <br />
        }
    </div>
    <div class="row">
        <div class="col-3">
            <input type="checkbox" checked="@appState.Config.LightSettings.UseDefaultBrightness" @bind-value="@appState.Config.LightSettings.UseDefaultBrightness" /> Lights Use Same Brightness
        </div>
    </div>
    <br />
    <br />
    <div style="height: 100px ">
        @if (appState.Config.LightSettings.UseDefaultBrightness)
        {
            <div class="row">
                <div class="col-4">
                    <h5>Brightness</h5>
                </div>
                <div class="col-4">
                    <Slider TValue="int" @bind-Value="@appState.Config.LightSettings.DefaultBrightness" Step="1" Min="0" Max="100" />
                </div>
                <div class="col-1">
                    <input style="width:50px" @bind-value="@appState.Config.LightSettings.DefaultBrightness" type="text" />
                </div>
            </div>
            <br />
            <br />
        }
    </div>
    <div class="row">
        <div class="col-4">
            <h5>Teams Presence Polling Interval</h5>
        </div>
        <div class="col-4">
            <Slider TValue="double" @bind-Value="@appState.Config.LightSettings.PollingInterval" Step=".1" Min="1.0" Max="5.0" />
        </div>
        <div class="col-1">
            <input style="width:50px" @bind-value="@appState.Config.LightSettings.PollingInterval" type="text" />
        </div>
    </div>
    <br />
    <br />
    @if (appState.Config.AppType == "Desktop")
    {
        <div class="row">
            <div class="col-4">
                <h5><strong>Icon Type</strong></h5>
            </div>
            <div class="col-4">
                <RadioGroup TValue="string" Name="iconType" @bind-CheckedValue="@appState.Config.IconType">
                    <Radio TValue="string" Value="@("Transparent")">Transparent</Radio>
                    <br />
                    <Radio TValue="string" Value="@("White")">White</Radio>
                </RadioGroup>
            </div>
        </div>
        <br />
        <br />
    }

    <div>
        <button @onclick="SaveSettings" class="btn btn-primary">Save Settings</button>
        <br />
        <br />
        @if (settingsSaved)
        {
            <span class="text-success">@message</span>
        }
    </div>
</div>


@code {
    bool settingsSaved = false;
    string message;

    bool Monday;
    bool Tuesday;
    bool Wednesday;
    bool Thursday;
    bool Friday;
    bool Saturday;
    bool Sunday;

    bool statusOff;
    bool statusWhite;
    bool statusKeep;

    void SaveSettings()
    {
        try
        {
            SetWorkingDays();

            if (statusOff)
            {
                appState.Config.LightSettings.HoursPassedStatus = "Off";
            }

            if (statusWhite)
            {
                appState.Config.LightSettings.HoursPassedStatus = "White";
            }

            if (statusKeep)
            {
                appState.Config.LightSettings.HoursPassedStatus = "Keep";
            }

            SettingsService.SaveSettings(appState.Config);
            message = "Settings Saved";
            settingsSaved = true;
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Error Occured Saving Settings");
            throw;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        appState.Config.LightSettings.WorkingHoursStartTimeAsDate = string.IsNullOrEmpty(appState.Config.LightSettings.WorkingHoursStartTime) ? null : DateTime.Parse(appState.Config.LightSettings.WorkingHoursStartTime, null);
        appState.Config.LightSettings.WorkingHoursEndTimeAsDate = string.IsNullOrEmpty(appState.Config.LightSettings.WorkingHoursEndTime) ? null : DateTime.Parse(appState.Config.LightSettings.WorkingHoursEndTime, null);

        switch (appState.Config.LightSettings.HoursPassedStatus)
        {
            case "Keep":
                statusKeep = true;
                break;
            case "White":
                statusWhite = true;
                break;
            case "Off":
                statusOff = true;
                break;
            default:
                statusKeep = true;
                break;
        }


        PopulateWorkingDays();
        await Task.CompletedTask;
    }

    void OnStatusChanged(ChangeEventArgs e)
    {
        switch (e.Value)
        {
            case "Keep":
                statusKeep = true;
                statusWhite = false;
                statusOff = false;
                break;
            case "White":
                statusKeep = false;
                statusWhite = true;
                statusOff = false;
                break;
            case "Off":
                statusKeep = false;
                statusWhite = false;
                statusOff = true;
                break;
            default:
                statusKeep = true;
                statusWhite = false;
                statusKeep = false;
                break;
        }
    }

    void OnTimeChanged(ChangeEventArgs e, object setting)
    {
        if (setting.ToString() == "start")
        {
            appState.Config.LightSettings.WorkingHoursStartTime = e.Value.ToString();
        }

        if (setting.ToString() == "end")
        {
            appState.Config.LightSettings.WorkingHoursEndTime = e.Value.ToString();
        }
    }

    private void PopulateWorkingDays()
    {
        if (!string.IsNullOrEmpty(appState.Config.LightSettings.WorkingDays))
        {
            if (appState.Config.LightSettings.WorkingDays.Contains("Monday", StringComparison.OrdinalIgnoreCase))
            {
                Monday = true;
            }

            if (appState.Config.LightSettings.WorkingDays.Contains("Tuesday", StringComparison.OrdinalIgnoreCase))
            {
                Tuesday = true;
            }

            if (appState.Config.LightSettings.WorkingDays.Contains("Wednesday", StringComparison.OrdinalIgnoreCase))
            {
                Wednesday = true;
            }

            if (appState.Config.LightSettings.WorkingDays.Contains("Thursday", StringComparison.OrdinalIgnoreCase))
            {
                Thursday = true;
            }

            if (appState.Config.LightSettings.WorkingDays.Contains("Friday", StringComparison.OrdinalIgnoreCase))
            {
                Friday = true;
            }

            if (appState.Config.LightSettings.WorkingDays.Contains("Saturday", StringComparison.OrdinalIgnoreCase))
            {
                Saturday = true;
            }

            if (appState.Config.LightSettings.WorkingDays.Contains("Sunday", StringComparison.OrdinalIgnoreCase))
            {
                Sunday = true;
            }
        }
    }

    private void SetWorkingDays()
    {
        List<string> days = new List<string>();

        if (Monday)
        {
            days.Add("Monday");
        }

        if (Tuesday)
        {
            days.Add("Tuesday");
        }

        if (Wednesday)
        {
            days.Add("Wednesday");
        }

        if (Thursday)
        {
            days.Add("Thursday");
        }

        if (Friday)
        {
            days.Add("Friday");
        }

        if (Saturday)
        {
            days.Add("Saturday");
        }

        if (Sunday)
        {
            days.Add("Sunday");
        }

        appState.Config.LightSettings.WorkingDays = string.Join("|", days);
    }
}
