@page "/settings"

@inject ILogger<Settings> _logger;

<MudPaper Width="100%" Elevation="0">
    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Style="text-align:center">
        <MudText Typo="Typo.h3">Settings</MudText>
        <MudGrid Class="mt-10" Justify="Justify.Center">
            <MudItem xs="6">
                <MudCheckBox @bind-Checked="@appState.Config.LightSettings.SyncLights" Label="Light Sync Enabled"></MudCheckBox>
            </MudItem>
            <MudItem xs="6">
                <MudCheckBox @bind-Checked="@appState.Config.LightSettings.UseWorkingHours" Label="Configure Working Hours"></MudCheckBox>
            </MudItem>
            @if (appState.Config.LightSettings.UseWorkingHours)
            {
                <MudItem xs="12">
                    <MudText Typo="Typo.h5">Working Days</MudText>
                </MudItem>
                <br />

                <br />
                <MudItem xs="12">
                    <MudGrid Justify="Justify.Center">
                        <MudItem xs="1">
                            <MudToggleIconButton Style=@(@Sunday ? "background-color: #594ae2ff; color: white" : "") @bind-Toggled="@Sunday" Color="@MudBlazor.Color.Default" ToggledColor="@MudBlazor.Color.Primary">Sun</MudToggleIconButton>
                        </MudItem>
                        <MudItem xs="1">
                            <MudToggleIconButton Style=@(@Monday ? "background-color: #594ae2ff; color: white" : "") @bind-Toggled="@Monday" Color="@MudBlazor.Color.Default" ToggledColor="@MudBlazor.Color.Primary">Mon</MudToggleIconButton>
                        </MudItem>
                        <MudItem xs="1">
                            <MudToggleIconButton Style=@(@Tuesday ? "background-color: #594ae2ff; color: white" : "") @bind-Toggled="@Tuesday" Color="@MudBlazor.Color.Default" ToggledColor="@MudBlazor.Color.Primary">Tues</MudToggleIconButton>
                        </MudItem>
                        <MudItem xs="1">
                            <MudToggleIconButton Style=@(@Wednesday ? "background-color: #594ae2ff; color: white" : "") @bind-Toggled="@Wednesday" Color="@MudBlazor.Color.Default" ToggledColor="@MudBlazor.Color.Primary">Wed</MudToggleIconButton>
                        </MudItem>
                        <MudItem xs="1">
                            <MudToggleIconButton Style=@(@Thursday ? "background-color: #594ae2ff; color: white" : "") @bind-Toggled="@Thursday" Color="@MudBlazor.Color.Default" ToggledColor="@MudBlazor.Color.Primary">Thu</MudToggleIconButton>
                        </MudItem>
                        <MudItem xs="1">
                            <MudToggleIconButton Style=@(@Friday ? "background-color: #594ae2ff; color: white" : "") @bind-Toggled="@Friday" Color="@MudBlazor.Color.Default" ToggledColor="@MudBlazor.Color.Primary">Fri</MudToggleIconButton>
                        </MudItem>
                        <MudItem xs="1">
                            <MudToggleIconButton Style=@(@Saturday ? "background-color: #594ae2ff; color: white" : "") @bind-Toggled="@Saturday" Color="@MudBlazor.Color.Default" ToggledColor="@MudBlazor.Color.Primary">Sat</MudToggleIconButton>
                        </MudItem>
                    </MudGrid>
                </MudItem>
                <br />

                <br />
                <MudItem xs="12">
                    <MudGrid Justify="Justify.FlexStart" Class="align-center">
                        <MudItem xs="4">
                            <MudText Typo="Typo.h5">Light Syncing Schedule (Working Hours)</MudText>
                        </MudItem>
                        <MudItem xs="3">
                            <MudTimePicker Label="Start Time" AmPm="true" @bind-Time="startTimeSpan" />
                        </MudItem>
                        <MudItem xs="3">
                            <MudTimePicker Label="End Time" AmPm="true" @bind-Time="endTimeSpan" />
                        </MudItem>
                    </MudGrid>
                </MudItem>
                <br />

                <br />
                <MudItem xs="12">
                    <MudGrid Justify="Justify.FlexStart" Class="align-center">
                        <MudItem xs="4">
                            <MudText Typo="Typo.h5">Light Status When After Hours Are Reached</MudText>
                        </MudItem>
                        <MudItem xs="4">
                            <MudRadioGroup @bind-SelectedOption="@appState.Config.LightSettings.HoursPassedStatus">
                                <MudRadio Option="@("Off")" Color="MudBlazor.Color.Default" Dense="true">Off</MudRadio>
                                <MudRadio Option="@("White")" Color="MudBlazor.Color.Default" Dense="true">White</MudRadio>
                                <MudRadio Option="@("Keep")" Color="MudBlazor.Color.Default" Dense="true">Keep</MudRadio>
                            </MudRadioGroup>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            }
            <MudItem xs="12">
                <MudCheckBox @bind-Checked="@appState.Config.LightSettings.UseDefaultBrightness" Label="Lights Use Same Brightness"></MudCheckBox>
            </MudItem>
            @if (appState.Config.LightSettings.UseDefaultBrightness)
            {
                <MudItem xs="12">
                    <MudGrid Justify="Justify.FlexStart" Class="align-center">
                        <MudItem xs="3">
                            <MudText Typo="Typo.h5">Brightness</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudSlider @bind-Value="appState.Config.LightSettings.DefaultBrightness" Min="0" Max="100"></MudSlider>
                        </MudItem>
                        <MudItem xs="2">
                            <MudNumericField @bind-Value="appState.Config.LightSettings.DefaultBrightness" Variant="Variant.Outlined" Min="0" Max="100" Step="1" />
                        </MudItem>
                    </MudGrid>
                </MudItem>
            }
            <MudItem xs="12">
                <MudGrid Justify="Justify.FlexStart" Class="align-center">
                    <MudItem xs="3">
                        <MudText Typo="Typo.h5">Polling Interval</MudText>
                    </MudItem>
                    <MudItem xs="6">
                        <MudSlider @bind-Value="appState.Config.LightSettings.PollingInterval" Step=".1" Min="1" Max="5"></MudSlider>
                    </MudItem>
                    <MudItem xs="2">
                        <MudNumericField @bind-Value="appState.Config.LightSettings.PollingInterval" Variant="Variant.Outlined" Format="F1" Min="1.0" Max="5.0" Step=".1" />
                    </MudItem>
                </MudGrid>
            </MudItem>
            @if (appState.Config.AppType == "Desktop")
            {
                <MudItem xs="12">
                    <MudGrid Justify="Justify.Center" Class="align-center">
                        <MudItem xs="3">
                            <MudText Typo="Typo.h5">Icon Type</MudText>
                        </MudItem>
                        <MudItem xs="4">
                            <MudRadioGroup @bind-SelectedOption="@appState.Config.IconType">
                                <MudRadio Option="@("Transparent")" Color="MudBlazor.Color.Default" Dense="true">Transparent</MudRadio>
                                <MudRadio Option="@("White")" Color="MudBlazor.Color.Default" Dense="true">White</MudRadio>
                            </MudRadioGroup>
                        </MudItem>
                        <MudItem xs="12">
                            <MudCheckBox @bind-Checked="@appState.Config.StartMinimized" Label="Start Minimized"></MudCheckBox>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            }
            <MudItem xs="12">
                <MudButton Class="mb-10" OnClick="SaveSettings" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">Save Settings</MudButton>
                @if (settingsSaved)
                {
                    <MudText Color="MudBlazor.Color.Success">@message</MudText>
                }
            </MudItem>
        </MudGrid>
    </MudContainer>
</MudPaper>

@code {
    bool settingsSaved = false;
    string message;

    bool Monday;
    bool Tuesday;
    bool Wednesday;
    bool Thursday;
    bool Friday;
    bool Saturday;
    bool Sunday;

    bool statusOff;
    bool statusWhite;
    bool statusKeep;

    TimeSpan? startTimeSpan;
    TimeSpan? endTimeSpan;

    protected override async Task OnInitializedAsync()
    {
        appState.Config.LightSettings.WorkingHoursStartTimeAsDate = string.IsNullOrEmpty(appState.Config.LightSettings.WorkingHoursStartTime) ? null : DateTime.Parse(appState.Config.LightSettings.WorkingHoursStartTime, null);
        appState.Config.LightSettings.WorkingHoursEndTimeAsDate = string.IsNullOrEmpty(appState.Config.LightSettings.WorkingHoursEndTime) ? null : DateTime.Parse(appState.Config.LightSettings.WorkingHoursEndTime, null);

        PopulateWorkingDays();

        startTimeSpan = appState.Config.LightSettings.WorkingHoursStartTimeAsDate == null ? null : appState.Config.LightSettings.WorkingHoursStartTimeAsDate.Value.TimeOfDay;
        startTimeSpan = appState.Config.LightSettings.WorkingHoursEndTimeAsDate == null ? null : appState.Config.LightSettings.WorkingHoursStartTimeAsDate.Value.TimeOfDay;

        await Task.CompletedTask;
    }

    void SaveSettings()
    {
        try
        {
            SetWorkingDays();


            appState.Config.LightSettings.WorkingHoursStartTime = startTimeSpan.ToString();
            appState.Config.LightSettings.WorkingHoursEndTime = endTimeSpan.ToString();

            SettingsService.SaveSettings(appState.Config);
            message = "Settings Saved";
            settingsSaved = true;
            _logger.LogInformation("Settings Saved from Settings Page");
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Error Occured Saving Settings from Settings Page");
            throw;
        }
    }


    private void PopulateWorkingDays()
    {
        if (!string.IsNullOrEmpty(appState.Config.LightSettings.WorkingDays))
        {
            if (appState.Config.LightSettings.WorkingDays.Contains("Monday", StringComparison.OrdinalIgnoreCase))
            {
                Monday = true;
            }

            if (appState.Config.LightSettings.WorkingDays.Contains("Tuesday", StringComparison.OrdinalIgnoreCase))
            {
                Tuesday = true;
            }

            if (appState.Config.LightSettings.WorkingDays.Contains("Wednesday", StringComparison.OrdinalIgnoreCase))
            {
                Wednesday = true;
            }

            if (appState.Config.LightSettings.WorkingDays.Contains("Thursday", StringComparison.OrdinalIgnoreCase))
            {
                Thursday = true;
            }

            if (appState.Config.LightSettings.WorkingDays.Contains("Friday", StringComparison.OrdinalIgnoreCase))
            {
                Friday = true;
            }

            if (appState.Config.LightSettings.WorkingDays.Contains("Saturday", StringComparison.OrdinalIgnoreCase))
            {
                Saturday = true;
            }

            if (appState.Config.LightSettings.WorkingDays.Contains("Sunday", StringComparison.OrdinalIgnoreCase))
            {
                Sunday = true;
            }
        }
    }

    private void SetWorkingDays()
    {
        List<string> days = new List<string>();

        if (Monday)
        {
            days.Add("Monday");
        }

        if (Tuesday)
        {
            days.Add("Tuesday");
        }

        if (Wednesday)
        {
            days.Add("Wednesday");
        }

        if (Thursday)
        {
            days.Add("Thursday");
        }

        if (Friday)
        {
            days.Add("Friday");
        }

        if (Saturday)
        {
            days.Add("Saturday");
        }

        if (Sunday)
        {
            days.Add("Sunday");
        }

        appState.Config.LightSettings.WorkingDays = string.Join("|", days);
    }
}
