@page "/settings"

@inject ISettingsService SettingsService
@inject AppState appState;
@inject ILogger<Settings> _logger;

<MudPaper Width="100%" Elevation="0">
    <MudContainer MaxWidth="MaxWidth.Large" Style="text-align:center">
        <MudText Typo="Typo.h1">Settings</MudText>
        <MudGrid Class="mt-10" Justify="Justify.Center">
            <MudItem lg="6" xs="6">
                <MudCheckBox @bind-Checked="@appState.Config.LightSettings.SyncLights" Label="Light Sync Enabled"></MudCheckBox>
            </MudItem>
            <MudItem lg="6">
                <MudCheckBox @bind-Checked="@appState.Config.LightSettings.UseWorkingHours" Label="Configure Working Hours"></MudCheckBox>
            </MudItem>
            @if (appState.Config.LightSettings.UseWorkingHours)
            {
                <MudItem lg="12">
                    <MudText Typo="Typo.h5">Working Days</MudText>
                </MudItem>
                <MudItem lg="3">
                    <MudCheckBox @bind-Checked="@Sunday" Label="Sunday"></MudCheckBox>
                </MudItem>
                <MudItem lg="3">
                    <MudCheckBox @bind-Checked="@Monday" Label="Monday"></MudCheckBox>
                </MudItem>
                <MudItem lg="3">
                    <MudCheckBox @bind-Checked="@Tuesday" Label="Tuesday"></MudCheckBox>
                </MudItem>
                <MudItem lg="3">
                    <MudCheckBox @bind-Checked="@Wednesday" Label="Wednesday"></MudCheckBox>
                </MudItem>
                <MudItem lg="3">
                    <MudCheckBox @bind-Checked="@Thursday" Label="Thursday"></MudCheckBox>
                </MudItem>
                <MudItem lg="3">
                    <MudCheckBox @bind-Checked="@Friday" Label="Friday"></MudCheckBox>
                </MudItem>
                <MudItem lg="3">
                    <MudCheckBox @bind-Checked="@Saturday" Label="Saturday"></MudCheckBox>
                </MudItem>
                <MudItem lg="4">
                    <MudText Typo="Typo.h5">Light Syncing Schedule (Working Hours)</MudText>
                </MudItem>
                <MudItem lg="3">
                    <MudTimePicker Label="Start Time" AmPm="true" @bind-Time="startTimeSpan" />
                </MudItem>
                <MudItem lg="3">
                    <MudTimePicker Label="End Time" AmPm="true" @bind-Time="endTimeSpan" />
                </MudItem>
                <MudItem lg="4">
                    <MudText Typo="Typo.h5">Light Status When After Hours Are Reached</MudText>
                </MudItem>
                <MudItem lg="4">
                    <MudRadioGroup @bind-SelectedOption="@appState.Config.LightSettings.HoursPassedStatus">
                        <MudRadio Option="@("Off")" Color="MudBlazor.Color.Default" Dense="true">Off</MudRadio>
                        <MudRadio Option="@("White")" Color="MudBlazor.Color.Default" Dense="true">White</MudRadio>
                        <MudRadio Option="@("Keep")" Color="MudBlazor.Color.Default" Dense="true">Keep</MudRadio>
                    </MudRadioGroup>
                </MudItem>
            }
            <MudItem lg="12">
                <MudCheckBox @bind-Checked="@appState.Config.LightSettings.UseDefaultBrightness" Label="Lights Use Same Brightness"></MudCheckBox>
            </MudItem>
            @if (appState.Config.LightSettings.UseDefaultBrightness)
            {
                <MudItem lg="3">
                    <MudText Typo="Typo.h5">Brightness</MudText>
                </MudItem>
                <MudItem lg="6">
                    <MudSlider @bind-Value="appState.Config.LightSettings.DefaultBrightness" Min="0" Max="100"></MudSlider>
                </MudItem>
                <MudItem lg="1">
                    <MudNumericField @bind-Value="appState.Config.LightSettings.DefaultBrightness" Variant="Variant.Outlined" Min="0" Max="100" Step="1" />
                </MudItem>
            }
            <MudItem lg="3">
                <MudText Typo="Typo.h5">Polling Interval</MudText>
            </MudItem>
            <MudItem lg="6">
                <MudSlider @bind-Value="appState.Config.LightSettings.PollingInterval" Step=".1" Min="1" Max="5"></MudSlider>
            </MudItem>
            <MudItem lg="1">
                <MudNumericField @bind-Value="appState.Config.LightSettings.PollingInterval" Variant="Variant.Outlined" Format="F1" Min="1.0" Max="5.0" Step=".1" />
            </MudItem>
            @if (appState.Config.AppType == "Desktop")
            {
                <MudItem lg="3">
                    <MudText Typo="Typo.h5">Icon Type</MudText>
                </MudItem>
                <MudItem lg="4">
                    <MudRadioGroup @bind-SelectedOption="@appState.Config.IconType">
                        <MudRadio Option="@("Transparent")" Color="MudBlazor.Color.Default" Dense="true">Transparent</MudRadio>
                        <MudRadio Option="@("White")" Color="MudBlazor.Color.Default" Dense="true">White</MudRadio>
                    </MudRadioGroup>
                </MudItem>
            <MudItem lg="12">
                <MudCheckBox @bind-Checked="@appState.Config.StartMinimized" Label="Start Minimized"></MudCheckBox>
            </MudItem>
            }
            <MudItem lg="12">
                <MudButton Class="mb-10" OnClick="SaveSettings" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">Save Settings</MudButton>
                <MudText Color="MudBlazor.Color.Success">@message</MudText>
            </MudItem>
        </MudGrid>
    </MudContainer>
</MudPaper>

@code {
    bool settingsSaved = false;
    string message;

    bool Monday;
    bool Tuesday;
    bool Wednesday;
    bool Thursday;
    bool Friday;
    bool Saturday;
    bool Sunday;

    bool statusOff;
    bool statusWhite;
    bool statusKeep;

    TimeSpan? startTimeSpan;
    TimeSpan? endTimeSpan;

    protected override async Task OnInitializedAsync()
    {
        appState.Config.LightSettings.WorkingHoursStartTimeAsDate = string.IsNullOrEmpty(appState.Config.LightSettings.WorkingHoursStartTime) ? null : DateTime.Parse(appState.Config.LightSettings.WorkingHoursStartTime, null);
        appState.Config.LightSettings.WorkingHoursEndTimeAsDate = string.IsNullOrEmpty(appState.Config.LightSettings.WorkingHoursEndTime) ? null : DateTime.Parse(appState.Config.LightSettings.WorkingHoursEndTime, null);

        PopulateWorkingDays();

        startTimeSpan = appState.Config.LightSettings.WorkingHoursStartTimeAsDate == null ? null : appState.Config.LightSettings.WorkingHoursStartTimeAsDate.Value.TimeOfDay;
        startTimeSpan = appState.Config.LightSettings.WorkingHoursEndTimeAsDate == null ? null : appState.Config.LightSettings.WorkingHoursStartTimeAsDate.Value.TimeOfDay;

        await Task.CompletedTask;
    }

        void SaveSettings()
    {
        try
        {
            SetWorkingDays();


            appState.Config.LightSettings.WorkingHoursStartTime = startTimeSpan.ToString();
            appState.Config.LightSettings.WorkingHoursEndTime = endTimeSpan.ToString();

            SettingsService.SaveSettings(appState.Config);
            message = "Settings Saved";
            settingsSaved = true;
            _logger.LogInformation("Settings Saved from Settings Page");
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Error Occured Saving Settings from Settings Page");
            throw;
        }
    }


    private void PopulateWorkingDays()
    {
        if (!string.IsNullOrEmpty(appState.Config.LightSettings.WorkingDays))
        {
            if (appState.Config.LightSettings.WorkingDays.Contains("Monday", StringComparison.OrdinalIgnoreCase))
            {
                Monday = true;
            }

            if (appState.Config.LightSettings.WorkingDays.Contains("Tuesday", StringComparison.OrdinalIgnoreCase))
            {
                Tuesday = true;
            }

            if (appState.Config.LightSettings.WorkingDays.Contains("Wednesday", StringComparison.OrdinalIgnoreCase))
            {
                Wednesday = true;
            }

            if (appState.Config.LightSettings.WorkingDays.Contains("Thursday", StringComparison.OrdinalIgnoreCase))
            {
                Thursday = true;
            }

            if (appState.Config.LightSettings.WorkingDays.Contains("Friday", StringComparison.OrdinalIgnoreCase))
            {
                Friday = true;
            }

            if (appState.Config.LightSettings.WorkingDays.Contains("Saturday", StringComparison.OrdinalIgnoreCase))
            {
                Saturday = true;
            }

            if (appState.Config.LightSettings.WorkingDays.Contains("Sunday", StringComparison.OrdinalIgnoreCase))
            {
                Sunday = true;
            }
        }
    }

    private void SetWorkingDays()
    {
        List<string> days = new List<string>();

        if (Monday)
        {
            days.Add("Monday");
        }

        if (Tuesday)
        {
            days.Add("Tuesday");
        }

        if (Wednesday)
        {
            days.Add("Wednesday");
        }

        if (Thursday)
        {
            days.Add("Thursday");
        }

        if (Friday)
        {
            days.Add("Friday");
        }

        if (Saturday)
        {
            days.Add("Saturday");
        }

        if (Sunday)
        {
            days.Add("Sunday");
        }

        appState.Config.LightSettings.WorkingDays = string.Join("|", days);
    }
}
