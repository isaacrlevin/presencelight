@page "/hue"

@inject ILogger<HueSetup> _logger;
@inject IDialogService DialogService;

<MudPaper Width="100%" Elevation="0">
    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Style="text-align:center">
        <MudText Typo="Typo.h3">Configure Phlips Hue</MudText>
        <MudGrid Class="mt-10" Justify="Justify.Center">
            <MudItem xs="4">
                <MudCheckBox @bind-Checked="@appState.Config.LightSettings.Hue.IsEnabled" Label="Connect to Philips Hue"></MudCheckBox>
            </MudItem>
            <MudItem xs="4">
                <MudCheckBox @bind-Checked="@appState.Config.LightSettings.Hue.UseRemoteApi" Label="Use Remote API"></MudCheckBox>
            </MudItem>
            <MudItem xs="4">
                <MudButton Disabled="@(!appState.Config.LightSettings.Hue.UseRemoteApi)" OnClick="LoginRemoteApi" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">Login to Hue Cloud</MudButton>
            </MudItem>
        </MudGrid>
        @if (appState.Config.LightSettings.Hue.IsEnabled)
        {
            <MudGrid Class="mt-10" Justify="Justify.Center">
                <MudItem xs="12">
                    <MudButton OnClick="FindBridge" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">Find Hue Bridge</MudButton>
                </MudItem>
                <MudItem xs="4">
                    <EditForm Model="@appState.Config" OnValidSubmit="RegisterBridge">
                        <MudTextField Variant="Variant.Outlined" @bind-Value="@appState.Config.LightSettings.Hue.HueIpAddress" />
                        <br />
                        <DataAnnotationsValidator />
                        <Microsoft.AspNetCore.Components.Forms.ValidationSummary />
                        <br />
                        <br />
                        <MudButton ButtonType="MudBlazor.ButtonType.Submit" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">Register Bridge</MudButton>
                    </EditForm>
                </MudItem>
            </MudGrid>
            @if (showHueMessage)
            {
                <MudGrid Class="mt-10" Justify="Justify.Center">
                    <MudItem xs="12">
                        <MudText Class=@hueMessageClass Typo="Typo.body1">@hueMessage</MudText>
                    </MudItem>
                </MudGrid>
            }
            <MudGrid Class="mt-10" Justify="Justify.Center">
                <MudItem xs="12">
                    <MudButton @onclick="@((ev) => CheckHue("Lights"))" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">Get Hue Lights</MudButton>
                    <span>&nbsp;&nbsp;</span>
                    <MudButton @onclick="@((ev) => CheckHue("Groups"))" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">Get Hue Groups</MudButton>
                </MudItem>
            </MudGrid>
            if (isLoadingLights)
            {
                <br />

                <br />
                <Circle Center="true" />
            }
            else
            {
                @if (appState.HueLights != null)
                {

                    <MudGrid Class="mt-10" Justify="Justify.Center">
                        <MudItem xs="4">
                            <MudSelect Dense="true" Label="@($"Select Hue {lastType}")" T="string" Variant="Variant.Outlined" ValueChanged="OnChange">
                                @foreach (var light in appState.HueLights)
                                {
                                    if (light.GetType() == typeof(Q42.HueApi.Models.Groups.Group))
                                    {
                                        var obj = (Q42.HueApi.Models.Groups.Group)light;

                                        @if (appState.Config.LightSettings.Hue.SelectedItemId == $"group_id:{obj.Id}")
                                        {
                                            <MudSelectItem Value="@("group_id:{@obj.Id}")">@obj.Name</MudSelectItem>
                                        }
                                        else
                                        {
                                            <MudSelectItem Value="@("group_id:{@obj.Id}")">@obj.Name</MudSelectItem>
                                        }
                                    }
                                    else
                                    {
                                        var obj = (Q42.HueApi.Light)light;

                                        @if (appState.Config.LightSettings.Hue.SelectedItemId == $"id:{obj.Id}")
                                        {
                                            <MudSelectItem Value="@("id:{@obj.Id}")">@obj.Name</MudSelectItem>
                                        }
                                        else
                                        {
                                            <MudSelectItem Value="@("id:{@obj.Id}")">@obj.Name</MudSelectItem>
                                        }
                                    }

                                }
                            </MudSelect>
                        </MudItem>
                    </MudGrid>

                    <MudGrid Class="mt-10 align-center" Justify="Justify.FlexStart">
                        <MudItem xs="3">
                            <MudText Typo="Typo.h5">Brightness</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudSlider @bind-Value="appState.Config.LightSettings.Hue.Brightness" Min="0" Max="100"></MudSlider>
                        </MudItem>
                        <MudItem xs="2">
                            <MudNumericField @bind-Value="appState.Config.LightSettings.Hue.Brightness" Variant="Variant.Outlined" Min="0" Max="100" Step="1" />
                        </MudItem>
                    </MudGrid>

                    <Statuses Light="@appState.Config.LightSettings.Hue"></Statuses>
                }
            }
        }
        <MudItem Class="mt-10" xs="12">
            <MudButton Class="mb-10" OnClick="Save" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">Save</MudButton>
            @if (settingsSaved)
            {
                <MudText Color="MudBlazor.Color.Success">@message</MudText>
            }
        </MudItem>
    </MudContainer>
</MudPaper>

@code {

    bool settingsSaved = false;
    bool isLoadingLights = false;
    string message;
    string hueMessageClass;

    bool showHueMessage = false;
    string hueMessage;

    string lastType = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!appState.SignedIn)
            {
                NavManager.NavigateTo("/");
            }

            await CheckHue();

            appState.OnChange += RaiseStateHasChanged;
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Error Occured loading Hue Page");
            throw;
        }
    }


    private async Task Save()
    {
        try
        {
            await SettingsService.SaveSettings(appState.Config);

            _mediator.Send(new Core.HueServices.InitializeCommand() { AppState = appState }).Wait();

            message = "Settings Saved";
            settingsSaved = true;
            _logger.LogInformation("Settings Saved from Hue Page");
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Error Occured Saving Hue Settings");
            throw;
        }
    }

    private async Task LoginRemoteApi()
    {
        try
        {
            _logger.LogInformation("Cloud Hue Login Initialized");
            var (bridgeId, apiKey, bridgeIp) = await _mediator.Send(new PresenceLight.Core.RemoteHueServices.RegisterBridgeCommand());
            if (!string.IsNullOrEmpty(apiKey) && !string.IsNullOrEmpty(bridgeId) && !string.IsNullOrEmpty(bridgeIp))
            {
                appState.Config.LightSettings.Hue.HueApiKey = apiKey;
                appState.Config.LightSettings.Hue.RemoteBridgeId = bridgeId;
                appState.Config.LightSettings.Hue.HueIpAddress = bridgeIp;
                _logger.LogInformation("Cloud Hue Login Successful");
                await Save();
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error Occured Getting Cloud Hue Api Key");
        }
    }

    async Task FindBridge()
    {
        try
        {
            _logger.LogInformation("Hue Bridge Lookup Initialized");
            appState.Config.LightSettings.Hue.HueIpAddress = await _mediator.Send(new PresenceLight.Core.HueServices.FindBridgeCommand());
            _logger.LogInformation("Hue Bridge Lookup Successful");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error Occured Getting Finding Hue Bridge");
        }
    }


    async Task RegisterBridge()
    {
        _logger.LogInformation("Hue Bridge Registration Initialized");


        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<Confirm>("Please press the sync button on your Philips Hue Bridge", options);

        var result = await dialog.Result;

        if (result.Cancelled)
        {
            _logger.LogInformation("Hue Bridge Registration Cancelled");
        }
        else
        {
            try
            {
                appState.Config.LightSettings.Hue.HueApiKey = await _mediator.Send(new Core.HueServices.RegisterBridgeCommand());
                _logger.LogInformation("Hue Bridge Registration Successful");
                await Save();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error Occured Registering Hue Bridge");
                hueMessage = "Error Occured registering bridge, please try again";
                showHueMessage = true;
                hueMessageClass = "text-danger";
            }

            if (!string.IsNullOrEmpty(appState.Config.LightSettings.Hue.HueApiKey))
            {
                try
                {
                    showHueMessage = true;
                    hueMessage = "App Registered with Bridge";
                    hueMessageClass = "text-success";


                    appState.SetHueLights(await _mediator.Send(new PresenceLight.Core.HueServices.GetLightsCommand()));

                    if (string.IsNullOrEmpty(appState.Config.LightSettings.Hue.SelectedItemId) && appState.HueLights.Count() > 0)
                    {
                        appState.Config.LightSettings.Hue.SelectedItemId = ((Q42.HueApi.Light)appState.HueLights.FirstOrDefault()).Id;
                    }
                }
                catch (Exception e)
                {
                    _logger.LogError(e, "Error Occured Getting Hue Lights");
                    throw;
                }

                await Save();
            }

            else
            {
                _logger.LogError("Hue Api Key not configured");
                hueMessage = "Api Key Not Created, please try again and ensure you press the sync button on your bridge";
                showHueMessage = true;
                hueMessageClass = "text-danger";
            }
        }
    }

    async Task CheckHue(string type = null)
    {
        if (appState.Config.LightSettings.Hue.IsEnabled)
        {
            isLoadingLights = true;
            if (string.IsNullOrEmpty(lastType) || type != lastType)
            {
                if (string.IsNullOrEmpty(type))
                {
                    if (!string.IsNullOrEmpty(appState.Config.LightSettings.Hue.SelectedItemId))
                    {
                        if (appState.Config.LightSettings.Hue.SelectedItemId.Contains("group"))
                        {
                            type = "Groups";
                        }
                        else
                        {
                            type = "Lights";
                        }
                    }
                    else
                    {
                        appState.Config.LightSettings.Hue.SelectedItemId = string.Empty;
                        type = "Lights";
                    }
                }
                lastType = type;
            }

            _logger.LogInformation($"Get Hue {type} Initialized");

            if (!string.IsNullOrEmpty(appState.Config.LightSettings.Hue.HueApiKey))
            {
                try
                {
                    if (type == "Groups")
                    {
                        if (appState.Config.LightSettings.Hue.UseRemoteApi)
                        {
                            appState.SetHueLights(await _mediator.Send(new Core.RemoteHueServices.GetGroupsCommand()));
                        }
                        else
                        {
                            appState.SetHueLights(await _mediator.Send(new Core.HueServices.GetGroupsCommand()));
                        }


                        if (string.IsNullOrEmpty(appState.Config.LightSettings.Hue.SelectedItemId) && appState.HueLights.Count() > 0)
                        {
                            var obj = (Q42.HueApi.Models.Groups.Group)appState.HueLights.FirstOrDefault();
                            appState.Config.LightSettings.Hue.SelectedItemId = $"group_id:{obj.Id}";
                        }
                    }
                    else
                    {
                        if (appState.Config.LightSettings.Hue.UseRemoteApi)
                        {
                            appState.SetHueLights(await _mediator.Send(new Core.RemoteHueServices.GetLightsCommand()));
                        }
                        else
                        {
                            appState.SetHueLights(await _mediator.Send(new Core.HueServices.GetLightsCommand()));
                        }


                        if (string.IsNullOrEmpty(appState.Config.LightSettings.Hue.SelectedItemId) && appState.HueLights.Count() > 0)
                        {
                            var obj = (Q42.HueApi.Light)appState.HueLights.FirstOrDefault();
                            appState.Config.LightSettings.Hue.SelectedItemId = $"id:{obj.Id}";
                        }
                    }

                    await Save();

                    showHueMessage = true;
                    hueMessage = "Connected to Hue";
                    hueMessageClass = "text-success";

                    _logger.LogInformation($"Get Hue {type} Successful");
                }
                catch (Exception e)
                {
                    _logger.LogError(e, "Error Occured Getting Hue Lights");
                    showHueMessage = true;
                    hueMessage = "Error Occured Connecting to Hue, please try again";
                    hueMessageClass = "text-danger";
                    this.StateHasChanged();
                    appState.SetHueLights(new List<Q42.HueApi.Light>());
                }
            }
            isLoadingLights = false;
        }
    }

    private void OnChange(string e)
    {
        var light = e;
        appState.Config.LightSettings.Hue.SelectedItemId = light;
        appState.SetHueLight(light);
        _logger.LogInformation($"Selected Hue Light Set: {light}");
    }

    public void Dispose()
    {
        appState.OnChange -= RaiseStateHasChanged;
    }

    private void RaiseStateHasChanged()
    {
        InvokeAsync(StateHasChanged);
    }
    }
