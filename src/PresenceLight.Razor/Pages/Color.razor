@page "/color"

@using LifxCloud.NET.Models
@inject ILogger<Color> _logger;

<MudPaper Height="500px" Width="100%" Elevation="0">
    <MudContainer MaxWidth="MaxWidth.Small" Style="text-align:center">
        <MudGrid Class="mt-10" Justify="Justify.Center">
            <MudItem xs="12">
                <MudText Typo="Typo.h3">Set Light Color</MudText>
            </MudItem>
            <MudItem xs="12" >
                <MudColorPicker PickerVariant="PickerVariant.Static" Label="Basic Color Picker" @bind-Text="color" Style="@($"color: {color}")" Placeholder="Select Color" />
            </MudItem>
            <MudItem xs="6" >
                <MudButton OnClick="SetColor" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Style="width:75%">Set Color</MudButton>
            </MudItem>
            <MudItem xs="6">
                <MudButton OnClick="SyncTeamsPresence" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Style="width:75%">Sync Teams Presence</MudButton>
            </MudItem>
        </MudGrid>
    </MudContainer>
</MudPaper>

@code {
    bool isGraphDisabled = false;
    string color;


    async Task SetColor()
    {
        try
        {
            appState.SetLightMode("Custom");
            _logger.LogInformation("Light Mode: Custom");
            isGraphDisabled = false;

            if (appState.LightMode == "Custom")
            {
                appState.SetCustomColor(color);
                _logger.LogInformation($"Custom Color: {color}");
            }

            if (appState.LightMode == "Custom")
            {
                if (!string.IsNullOrEmpty(appState.Config.LightSettings.Hue.HueApiKey) && !string.IsNullOrEmpty(appState.Config.LightSettings.Hue.HueIpAddress) && !string.IsNullOrEmpty(appState.Config.LightSettings.Hue.SelectedItemId))
                {
                    if (appState.Config.LightSettings.Hue.UseRemoteApi)
                    {
                        if (!string.IsNullOrEmpty(appState.Config.LightSettings.Hue.RemoteBridgeId))
                        {
                            await _mediator.Send(new Core.RemoteHueServices.SetColorCommand
                                {
                                    Availability = appState.CustomColor,
                                    LightId = appState.Config.LightSettings.Hue.SelectedItemId,
                                    BridgeId = appState.Config.LightSettings.Hue.RemoteBridgeId
                                }).ConfigureAwait(true);
                        }
                    }
                    else
                    {
                        await _mediator.Send(new Core.HueServices.SetColorCommand() { Activity = appState.CustomColor, Availability = appState.CustomColor, LightID = appState.Config.LightSettings.Hue.SelectedItemId }).ConfigureAwait(true);

                    }
                }

                if (appState.Config.LightSettings.LIFX.IsEnabled && !string.IsNullOrEmpty(appState.Config.LightSettings.LIFX.LIFXApiKey))
                {
                    await _mediator.Send(new Core.LifxServices.SetColorCommand() { Availability = appState.CustomColor, Activity = appState.CustomColor, LightId = appState.Config.LightSettings.LIFX.SelectedItemId }).ConfigureAwait(true);
                }

                if (appState.Config.LightSettings.Yeelight.IsEnabled && !string.IsNullOrEmpty(appState.Config.LightSettings.Yeelight.SelectedItemId))
                {
                    await _mediator.Send(new PresenceLight.Core.YeelightServices.SetColorCommand { Activity = appState.CustomColor, Availability = appState.CustomColor, LightId = appState.Config.LightSettings.Yeelight.SelectedItemId }).ConfigureAwait(true);
                }

                if (appState.Config.LightSettings.CustomApi.IsEnabled)
                {
                    string response = await _mediator.Send(new Core.CustomApiServices.SetColorCommand
                        {
                            Activity = appState.CustomColor,
                            Availability = appState.CustomColor
                        });
                }

                if (appState.Config.LightSettings.LocalSerialHost.IsEnabled)
                {
                    string response = await _mediator.Send(new Core.LocalSerialHostServices.SetColorCommand
                        {
                            Activity = appState.CustomColor,
                            Availability = appState.CustomColor
                        });
                }

                if (appState.Config.LightSettings.Wiz.IsEnabled)
                {
                    await _mediator.Send(new Core.WizServices.SetColorCommand
                        {
                            Activity = appState.CustomColor,
                            Availability = appState.CustomColor,
                            LightID = appState.Config.LightSettings.Wiz.SelectedItemId
                        });
                }
            }
        }
        catch (Exception e)
        {
            _logger.LogError(e, $"Error Occured Setting Custom Color {color}");
            throw;
        }
    }

    void SyncTeamsPresence()
    {
        isGraphDisabled = true;
        appState.SetLightMode("Graph");
        _logger.LogInformation("Light Mode: Graph");
    }

    protected override void OnInitialized()
    {
        appState.OnChange += RaiseStateHasChanged;
    }

    public void Dispose()
    {
        appState.OnChange -= RaiseStateHasChanged;
    }

    private void RaiseStateHasChanged()
    {
        InvokeAsync(StateHasChanged);
    }
}
