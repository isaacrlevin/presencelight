@page "/lifx"

@inject ILogger<Lifx> _logger;
@inject LIFXOAuthHelper _lIFXOAuthHelper;

<MudPaper Width="100%" Elevation="0">
    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Style="text-align:center">
        <MudText Typo="Typo.h3">Configure LIFX</MudText>
        <MudGrid Class="mt-10" Justify="Justify.Center">
            <MudItem xs="12">
                <MudCheckBox @bind-Checked="@appState.Config.LightSettings.LIFX.IsEnabled" Label="Connect to LIFX"></MudCheckBox>
            </MudItem>
        </MudGrid>
        @if (appState.Config.LightSettings.LIFX.IsEnabled)
        {
            <MudGrid Class="mt-10 align-center" Justify="Justify.FlexStart">
                <MudItem xs="3">
                    <h5>LIFX Token</h5>
                </MudItem>
                <MudItem xs="5">
                    <MudTextField Variant="Variant.Outlined" Value="@appState.Config.LightSettings.LIFX.LIFXApiKey"></MudTextField>
                </MudItem>
                <MudItem xs="2">
                    <MudButton OnClick="GetToken" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">Get Token</MudButton>
                </MudItem>
            </MudGrid>

            <MudGrid Class="mt-10" Justify="Justify.Center">
                <MudItem xs="12">
                    <MudButton OnClick="@((ev) => CheckLIFX("Lights"))" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">Find LIFX Lights</MudButton>
                    <MudButton OnClick="@((ev) => CheckLIFX("Groups"))" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">Find LIFX Groups</MudButton>
                </MudItem>
            </MudGrid>
            if (isLoadingLights)
            {
                <br />

                <br />
                <Circle Center="true" />
            }
            else
            {
                @if (appState.LIFXLights != null)
                {
                    <MudGrid Class="mt-10" Justify="Justify.Center">
                        <MudItem xs="4">
                            <MudSelect Dense="true" Label="@($"Select LIFX {lastType}")" T="string" Variant="Variant.Outlined" ValueChanged="OnChange">
                                @foreach (var light in appState.LIFXLights)
                                {
                                    if (light.GetType() == typeof(LifxCloud.NET.Models.Group))
                                    {
                                        var obj = (LifxCloud.NET.Models.Group)light;

                                        @if (appState.Config.LightSettings.LIFX.SelectedItemId == $"group_id:{obj.Id}")
                                        {
                                            <MudSelectItem Value="@("group_id:{@obj.Id}")">@obj.Label</MudSelectItem>
                                        }
                                        else
                                        {
                                            <MudSelectItem Value="@("group_id:{@obj.Id}")">@obj.Label</MudSelectItem>
                                        }
                                    }
                                    else
                                    {
                                        var obj = (LifxCloud.NET.Models.Light)light;

                                        @if (appState.Config.LightSettings.LIFX.SelectedItemId == $"id:{obj.Id}")
                                        {
                                            <MudSelectItem Value="@("id:{@obj.Id}")">@obj.Label</MudSelectItem>
                                        }
                                        else
                                        {
                                            <MudSelectItem Value="@("id:{@obj.Id}")">@obj.Label</MudSelectItem>
                                        }
                                    }

                                }
                            </MudSelect>
                        </MudItem>
                    </MudGrid>

                    <MudGrid Class="mt-10 align-center" Justify="Justify.FlexStart">
                        <MudItem xs="3">
                            <MudText Typo="Typo.h5">Brightness</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudSlider @bind-Value="appState.Config.LightSettings.LIFX.Brightness" Min="0" Max="100"></MudSlider>
                        </MudItem>
                        <MudItem xs="2">
                            <MudNumericField @bind-Value="appState.Config.LightSettings.LIFX.Brightness" Variant="Variant.Outlined" Min="0" Max="100" Step="1" />
                        </MudItem>
                    </MudGrid>

                    <Statuses Light="@appState.Config.LightSettings.LIFX"></Statuses>
                }
            }
        }
        <MudItem Class="mt-10" xs="12">
            <MudButton Class="mb-10" OnClick="Save" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">Save</MudButton>
            @if (settingsSaved)
            {
                <MudText Color="MudBlazor.Color.Success">@message</MudText>
            }
        </MudItem>
    </MudContainer>
</MudPaper>

@code {
    bool settingsSaved = false;
    string message;
    string lifxMessageClass;

    bool showLifxMessage = false;
    string lifxMessage;
    string lastType = "";
    bool isLoadingLights = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            appState.OnChange += RaiseStateHasChanged;

            if (!appState.SignedIn)
            {
                NavManager.NavigateTo("/");
            }

            await CheckLIFX();
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Error Occured loading LIFX Setup");
            throw;
        }
    }

    private async Task Save()
    {
        try
        {
            await SettingsService.SaveSettings(appState.Config);
            message = "Settings Saved";
            settingsSaved = true;
            _logger.LogInformation("Settings Saved from LIFX Page");
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Error Occured Saving Lifx Settings");
            throw;
        }
    }

    async Task CheckLIFX(string type = null)
    {
        if (@appState.Config.LightSettings.LIFX.IsEnabled)
        {
            isLoadingLights = true;
            if (string.IsNullOrEmpty(lastType) || type != lastType)
            {
                if (string.IsNullOrEmpty(type))
                {
                    if (!string.IsNullOrEmpty(appState.Config.LightSettings.LIFX.SelectedItemId))
                    {
                        if (appState.Config.LightSettings.LIFX.SelectedItemId.Contains("group"))
                        {
                            type = "Groups";
                        }
                        else
                        {
                            type = "Lights";
                        }
                    }
                    else
                    {
                        appState.Config.LightSettings.LIFX.SelectedItemId = string.Empty;
                        type = "Lights";
                    }
                }
                lastType = type;
            }

            _logger.LogInformation($"Get LIFX {type} Initialized");

            if (!string.IsNullOrEmpty(appState.Config.LightSettings.LIFX.LIFXApiKey))
            {
                try
                {
                    if (type == "Groups")
                    {

                        appState.SetLIFXLights(await _mediator.Send(new Core.LifxServices.GetAllGroupsCommand() { ApiKey = appState.Config.LightSettings.LIFX.LIFXApiKey }));

                        if (string.IsNullOrEmpty(appState.Config.LightSettings.LIFX.SelectedItemId) && appState.LIFXLights.Count() > 0)
                        {
                            var obj = (LifxCloud.NET.Models.Group)appState.LIFXLights.FirstOrDefault();
                            appState.Config.LightSettings.LIFX.SelectedItemId = $"group_id:{obj.Id}";
                        }
                    }
                    else
                    {
                        appState.SetLIFXLights(await _mediator.Send(new Core.LifxServices.GetAllLightsCommand() { ApiKey = appState.Config.LightSettings.LIFX.LIFXApiKey }));

                        if (string.IsNullOrEmpty(appState.Config.LightSettings.LIFX.SelectedItemId) && appState.LIFXLights.Count() > 0)
                        {
                            var obj = (LifxCloud.NET.Models.Light)appState.LIFXLights.FirstOrDefault();
                            appState.Config.LightSettings.LIFX.SelectedItemId = $"id:{obj.Id}";
                        }
                    }

                    await Save();

                    showLifxMessage = true;
                    lifxMessage = "Connected to LIFX Cloud";
                    lifxMessageClass = "text-success";

                    _logger.LogInformation($"Get LIFX {type} Successful");
                }
                catch (Exception e)
                {
                    _logger.LogError(e, "Error Occured Getting LIFX Lights");
                    showLifxMessage = true;
                    lifxMessage = "Error Occured Connecting to LIFX, please try again";
                    lifxMessageClass = "text-danger";
                    this.StateHasChanged();
                    appState.SetLIFXLights(new List<LifxCloud.NET.Models.Light>());
                }
            }
            isLoadingLights = false;
        }
    }

    async Task GetToken()
    {
        _logger.LogInformation("LIFX Token Retrieval Initialized");

        if (!@appState.Config.LightSettings.LIFX.IsEnabled)
        {
            appState.Config.LightSettings.LIFX.IsEnabled = true;
        }
        var token = await _lIFXOAuthHelper.InitiateTokenRetrieval();
        appState.Config.LightSettings.LIFX.LIFXApiKey = token;
        if (!@appState.Config.LightSettings.LIFX.IsEnabled)
        {
            appState.Config.LightSettings.LIFX.IsEnabled = true;
        }

        await Save();
        _logger.LogInformation("LIFX Token Retrieveal Successful");
    }

    private void OnChange(string e)
    {
        var light = e;
        appState.Config.LightSettings.LIFX.SelectedItemId = light;
        appState.SetLIFXLight(light);
        _logger.LogInformation($"Selected LIFX Light Set: {light}");
    }

    public void Dispose()
    {
        appState.OnChange -= RaiseStateHasChanged;
    }

    private void RaiseStateHasChanged()
    {
        InvokeAsync(StateHasChanged);
    }
    }
