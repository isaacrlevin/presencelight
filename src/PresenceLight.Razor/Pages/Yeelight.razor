@page "/yeelight"

@inject ILogger<CustomApiSetup> _logger;

<MudPaper Width="100%" Elevation="0">
    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Style="text-align:center">
        <MudText Typo="Typo.h3">Configure Yeelight</MudText>
        <MudGrid Class="mt-10" Justify="Justify.Center">
            <MudItem xs="12">
                <MudCheckBox @bind-Checked="@appState.Config.LightSettings.Yeelight.IsEnabled" Label="Connect to Yeelight"></MudCheckBox>
            </MudItem>
        </MudGrid>
        @if (appState.Config.LightSettings.Yeelight.IsEnabled)
        {
            <MudGrid Class="mt-10" Justify="Justify.Center">
                <MudItem xs="12">
                    <MudButton OnClick="GetYeeLights" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">Find Yeelights</MudButton>
                </MudItem>
            </MudGrid>
            if (isLoadingLights)
            {
                <br />

                <br />
                <Circle Center="true" />
            }
            else
            {
                @if (appState.YeelightLights != null)
                {
                    <MudGrid Class="mt-10" Justify="Justify.Center">
                        <MudItem xs="4">
                            <MudSelect Dense="true" T="string" Variant="Variant.Outlined" ValueChanged="OnChange">
                                <MudSelectItem Disabled="true" Value="@("Select")" />
                                @foreach (var light in appState.YeelightLights)
                                {
                                    @if (appState.Config.LightSettings.Yeelight.SelectedItemId == light.Id)
                                    {
                                        <MudSelectItem Value="@light.Hostname" />
                                    }
                                    else
                                    {
                                        <MudSelectItem Value="@light.Hostname" />
                                    }
                                }
                            </MudSelect>
                        </MudItem>
                    </MudGrid>

                    <MudGrid Class="mt-10 align-center" Justify="Justify.FlexStart">
                        <MudItem xs="3">
                            <MudText Typo="Typo.h5">Brightness</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudSlider @bind-Value="appState.Config.LightSettings.Yeelight.Brightness" Min="0" Max="100"></MudSlider>
                        </MudItem>
                        <MudItem xs="2">
                            <MudNumericField @bind-Value="appState.Config.LightSettings.Yeelight.Brightness" Variant="Variant.Outlined" Min="0" Max="100" Step="1" />
                        </MudItem>
                    </MudGrid>

                    <Statuses Light="@appState.Config.LightSettings.Yeelight"></Statuses>
                }
            }
        }
        <MudItem Class="mt-10" xs="12">
            <MudButton Class="mb-10" OnClick="Save" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">Save</MudButton>
            @if (settingsSaved)
            {
                <MudText Color="MudBlazor.Color.Success">@message</MudText>
            }
        </MudItem>
    </MudContainer>
</MudPaper>

@code {
    bool settingsSaved = false;
    string message;
    bool isLoadingLights = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            appState.OnChange += RaiseStateHasChanged;

            if (!appState.SignedIn)
            {
                NavManager.NavigateTo("/");
            }

            await GetYeeLights();
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Error Occured loading Yeelight");
            throw;
        }
        await Task.CompletedTask;
    }

    private async Task Save()
    {
        try
        {
            await SettingsService.SaveSettings(appState.Config);
            message = "Settings Saved";
            settingsSaved = true;
            _logger.LogInformation("Settings Saved from Yeelight Page");
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Error Occured Saving Yeelight Settings");
            throw;
        }
    }

    private void OnChange(string e)
    {
        var light = e;
        appState.Config.LightSettings.Yeelight.SelectedItemId = light;
        appState.SetYeelightLight(light);
        _logger.LogInformation($"Selected Yeelight Light Set: {light}");
    }

    public async Task GetYeeLights()
    {
        if (@appState.Config.LightSettings.Yeelight.IsEnabled)
        {
            try
            {
                isLoadingLights = true;
                _logger.LogInformation("Yeelight Light Retrieval Initialized");
                appState.SetYeelightLights(await _mediator.Send(new Core.YeelightServices.GetLightCommand()));

                if (string.IsNullOrEmpty(appState.Config.LightSettings.Yeelight.SelectedItemId) && appState.YeelightLights.Count() > 0)
                {
                    appState.Config.LightSettings.Yeelight.SelectedItemId = appState.YeelightLights.FirstOrDefault().Id;
                }
                _logger.LogInformation("Yeelight Light Retrieval Successful");
                isLoadingLights = false;

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error occured Finding YeeLights");
                throw;
            }
        }
    }

    public void Dispose()
    {
        appState.OnChange -= RaiseStateHasChanged;
    }

    private void RaiseStateHasChanged()
    {
        InvokeAsync(StateHasChanged);
    }
        }
