@inject AppState appState
@inject NavigationManager NavManager

@if (appState.Config.AppType == "Desktop")
{
    @if (appState.SignedIn && appState.User != null)
    {
        <MudMenu Direction="MudBlazor.Direction.Right" OffsetX="true" Dense="true" Class="mt-1 ml-4">
            <ActivatorContent>
                <MudText Typo="Typo.body2" Class="px-4 py-2"> Hello, @appState.User.DisplayName!</MudText>
            </ActivatorContent>
            <ChildContent>
                <MudListItem Text="Logout" Icon="@Icons.Material.Filled.Logout" OnClick="SignOut" />
            </ChildContent>
        </MudMenu>
    }
    else
    { }
}
else
{
    <AuthorizeView>
        <Authorized>
            <MudMenu Direction="MudBlazor.Direction.Right" OffsetX="true" Dense="true" Class="mt-1 ml-4">
                <ActivatorContent>
                    <MudText Typo="Typo.body2" Class="px-4 py-2"> Hello, @context.User.Identity.Name!</MudText>
                </ActivatorContent>
                <ChildContent>
                    <MudListItem Text="Logout" Icon="@Icons.Material.Filled.Logout" OnClick="SignOut" />
                </ChildContent>
            </MudMenu>
        </Authorized>
        <NotAuthorized>
            <MudLink Href="MicrosoftIdentity/Account/SignIn">Log in</MudLink>
        </NotAuthorized>
    </AuthorizeView>
}

@code
{
    protected override async Task OnInitializedAsync()
    {
        appState.OnChange += RaiseStateHasChanged;
    }

    private void SignIn()
    {
        appState.SignInRequested = true;
    }

    private void SignOut()
    {
        appState.SignOutRequested = true;
        NavManager.NavigateTo("/");
    }

    public void Dispose()
    {
        appState.OnChange -= RaiseStateHasChanged;
    }

    private void RaiseStateHasChanged()
    {
        InvokeAsync(StateHasChanged);
    }
}