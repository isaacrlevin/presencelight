<br />
<br />
<MudExpansionPanels>
    <MudExpansionPanel>
        <TitleContent>
            <MudText Typo="Typo.h6" Color="MudBlazor.Color.Primary">Custom Colors</MudText>
        </TitleContent>
        <ChildContent>
            <MudGrid Justify="Justify.Center">
                <MudItem xs="12">
                    <MudCheckBox @bind-Checked="@Light.UseActivityStatus" Label="Use Activity Statuses"></MudCheckBox>
                </MudItem>
            </MudGrid>
            <br />
            <br />

            @foreach (var lightStatus in Light.Statuses.GetType().GetProperties().OrderBy(a => a.Name))
            {
                @if ((!Light.UseActivityStatus && lightStatus.Name.Contains("Availability")) || (Light.UseActivityStatus && lightStatus.Name.Contains("Activity")))
                {
                    var status = (AvailabilityStatus)lightStatus.GetValue(Light.Statuses);

                    <MudGrid Justify="Justify.Center">
                        <MudItem xs="4">
                            <MudText Typo=Typo.h6>@Helpers.HumanifyText(lightStatus.Name.Replace("Status","").Replace("Availability","").Replace("Activity","")) Color</MudText>
                        </MudItem>
                        <MudItem xs="4">
                            <ColorEdit Color="@status.Colour" @onchange="@((ChangeEventArgs e) => ChangeStatusColor(e, status))" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudCheckBox T="bool" Checked="@status.Disabled" CheckedChanged="@(x => StatusDisabledOnCheck(x, status))" Label="Off?"></MudCheckBox>
                        </MudItem>
                    </MudGrid>
                }
            }
        </ChildContent>
    </MudExpansionPanel>
</MudExpansionPanels>
@code {
    [Parameter] public BaseLight Light { get; set; }

    void StatusDisabledOnCheck(bool e, object settingValue)
    {
        var newSetting = e;
        AvailabilityStatus status = (AvailabilityStatus)settingValue;
        status.Disabled = newSetting;
    }

    void ChangeStatusColor(ChangeEventArgs e, object settingValue)
    {
        var newSetting = e.Value;
        AvailabilityStatus status = (AvailabilityStatus)settingValue;
        status.Colour = (string)newSetting;
    }
}
