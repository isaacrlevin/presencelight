# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
 branches:
   include:
   - main
 paths:
   exclude:
   - azure-pipelines-wpf.yml
   - .github/workflows/main.yml
   - src/PresenceLight/*
   - README.md
   - worker-README.md

stages:
- stage: Build
  variables:
  - group: AppSettings
  - name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
    value: true
  - name: BuildConfiguration 
    value: 'Release'

  jobs:
  - job: Build
    pool:
      vmImage: windows-latest
    strategy:
      matrix:
        Channel_Windows_x64_x86:
          ChannelName: Windows_x64_x86
          RID: win-x64
        Channel_Windows_ARM:
          ChannelName: Windows_ARM
          RID: win-arm
        Channel_macOS:
          ChannelName: macOS
          RID: osx-x64
        Channel_Linux_ARM:
          ChannelName: Linux_ARM
          RID: linux-arm
        Channel_Linux_ARM64:
          ChannelName: Linux_ARM64
          RID: linux-x64
        Channel_Linux_Musl_x64:
          ChannelName: Linux_Musl_x64
          RID: linux-x64
        Channel_Linux_Musl_ARM_x64:
          ChannelName: Linux_Musl_ARM_x64
          RID: linux-musl-x64
    steps:
      - task: UseDotNet@2
        displayName: 'Use .NET Core SDK 5.0.x'
        inputs:
          version: 5.0.x
          includePreviewVersions: true
          packageType: sdk

      - task: DotNetCoreCLI@2
        inputs:
          command: custom
          custom: tool
          arguments: install -g nbgv
        displayName: Install NBGV tool

      - script: nbgv cloud -c -a
        displayName: Set Build Version

      - powershell: |
          # Update AppSettings.json. This must be done before build.
          $appsettings= get-content ".\src\PresenceLight.Worker\appsettings.json" -raw | ConvertFrom-Json
          $appsettings.azureAd.clientId = "$(ApplicationId)"
          $appsettings.azureAd.clientSecret = "$(ClientSecret)"
          $appsettings.applicationInsights.instrumentationkey = "$(InstrumentationKey)"
          $appsettings | ConvertTo-Json -depth 32| set-content '.\src\PresenceLight.Worker\appsettings.json'
        displayName: Update appsettings.json
        condition: and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')))

      - powershell: |
          # Update PresenceLightSettings.json. This must be done before build.
          $PresenceLightSettings= get-content ".\src\PresenceLight.Worker\PresenceLightSettings.json" -raw | ConvertFrom-Json
          $PresenceLightSettings.lightSettings.lifx.LIFXClientId = "$(LIFXClientId)"
          $PresenceLightSettings.lightSettings.lifx.LIFXClientSecret = "$(LIFXClientSecret)"
          $PresenceLightSettings | ConvertTo-Json -depth 32| set-content '.\src\PresenceLight.Worker\PresenceLightSettings.json'
        displayName: Update PresenceLightSettings.json
        condition: and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')))

      - task: DotNetCoreCLI@2
        inputs:
          command: 'publish'
          workingDirectory: src/PresenceLight.Worker
          arguments: -r $(RID) -c $(BuildConfiguration) /p:PublishSingleFile=true -o $(Build.ArtifactStagingDirectory)/$(GitBuildVersionSimple)_$(ChannelName) /p:Version=$(GitBuildVersionSimple)
          publishWebProjects: false

      - publish: $(Build.ArtifactStagingDirectory)\$(GitBuildVersionSimple)_$(ChannelName)
        displayName: Publish Arifacts
        artifact: $(ChannelName)

      - publish: Build
        displayName: Publish signing scripts
        artifact: SigningScripts
        condition: and(succeeded(), eq(variables['ChannelName'], 'Windows_x64_x86'))

- stage: CodeSign
  condition: and(succeeded('Build'), not(eq(variables['build.reason'], 'PullRequest')))
  jobs:
  - deployment: CodeSign
    displayName: Code Signing
    pool:
      vmImage: windows-latest
    environment: Code Sign - CI
    variables:
    - group: Sign Client Credentials
    strategy:
      runOnce:
        deploy:
          steps:


          - task: DownloadPipelineArtifact@2
            displayName: Download Windows_x64_x86 Artifacts
            inputs:
              artifactName: Windows_x64_x86
              targetPath: $(Pipeline.Workspace)/ToSign/Windows_x64_x86

          - task: DownloadPipelineArtifact@2
            displayName: Download Windows_ARM Artifacts
            inputs:
              artifactName: Windows_ARM
              targetPath: $(Pipeline.Workspace)/ToSign/Windows_ARM

          - task: DownloadPipelineArtifact@2
            displayName: Download macOS Artifacts
            inputs:
              artifactName: macOS
              targetPath: $(Pipeline.Workspace)/ToSign/macOS

          - task: DownloadPipelineArtifact@2
            displayName: Download Linux_ARM Artifacts
            inputs:
              artifactName: Linux_ARM
              targetPath: $(Pipeline.Workspace)/ToSign/Linux_ARM

          - task: DownloadPipelineArtifact@2
            displayName: Download Linux_ARM64 Artifacts
            inputs:
              artifactName: Linux_ARM64
              targetPath: $(Pipeline.Workspace)/ToSign/Linux_ARM64

          - task: DownloadPipelineArtifact@2
            displayName: Download Linux_Musl_x64 Artifacts
            inputs:
              artifactName: Linux_Musl_x64
              targetPath: $(Pipeline.Workspace)/ToSign/Linux_Musl_x64

          - task: DownloadPipelineArtifact@2
            displayName: Download Linux_Musl_ARM_x64 Artifacts
            inputs:
              artifactName: Linux_Musl_ARM_x64
              targetPath: $(Pipeline.Workspace)/ToSign/Linux_Musl_ARM_x64

          - download: current
            artifact: SigningScripts

          - task: DotNetCoreCLI@2
            inputs:
              command: custom
              custom: tool
              arguments: install --tool-path . SignClient
            displayName: Install SignTool tool

          - task: AzureCLI@2
            displayName: Scale Up Sign Service
            inputs:
              azureSubscription: 'Isaac Levin MSDN (a07802f5-f8df-47d8-9b88-79ba55cfb396)'
              scriptType: 'ps'
              scriptLocation: 'inlineScript'
              inlineScript: 'az appservice plan update --name levin-signserv-asp-2dnwx6q6jwiay --resource-group SignService --sku P1V2'

          - pwsh: |
              .\SignClient "Sign" `
              --baseDirectory "$(Pipeline.Workspace)\ToSign" `
              --input "**/*.{exe,zip}" `
              --config "$(Pipeline.Workspace)\SigningScripts\appsettings.json" `
              --filelist "$(Pipeline.Workspace)\SigningScripts\filelist.txt" `
              --user "$(SignClientUser)" `
              --secret "$(SignClientSecret)" `
              --name "PresenceLight" `
              --description "PresenceLight" `
              --descriptionUrl "https://github.com/isaacrlevin/PresenceLight"
            displayName: Authenticode Sign artifacts

          - task: AzureCLI@2
            displayName: Scale Down Sign Service
            inputs:
              azureSubscription: 'Isaac Levin MSDN (a07802f5-f8df-47d8-9b88-79ba55cfb396)'
              scriptType: 'ps'
              scriptLocation: 'inlineScript'
              inlineScript: 'az appservice plan update --name levin-signserv-asp-2dnwx6q6jwiay --resource-group SignService --sku S1'

          - publish: $(Pipeline.Workspace)/ToSign/Windows_x64_x86
            displayName: Publish Signed Windows_x64_x86 Packages
            artifact: Windows_x64_x86_Signed

          - publish: $(Pipeline.Workspace)/ToSign/Windows_ARM
            displayName: Publish Signed Windows_ARM Packages
            artifact: Windows_ARM_Signed

          - publish: $(Pipeline.Workspace)/ToSign/macOS
            displayName: Publish Signed macOS Packages
            artifact: macOS_Signed

          - publish: $(Pipeline.Workspace)/ToSign/Linux_ARM
            displayName: Publish Signed Linux_ARM Packages
            artifact: Linux_ARM_Signed

          - publish: $(Pipeline.Workspace)/ToSign/Linux_ARM64
            displayName: Publish Signed Linux_ARM64 Packages
            artifact: Linux_ARM64_Signed

          - publish: $(Pipeline.Workspace)/ToSign/Linux_Musl_x64
            displayName: Publish Signed Linux_Musl_x64 Packages
            artifact: Linux_Musl_x64_Signed

          - publish: $(Pipeline.Workspace)/ToSign/Linux_Musl_ARM_x64
            displayName: Publish Signed Linux_Musl_ARM_x64 Packages
            artifact: Linux_Musl_ARM_x64_Signed
